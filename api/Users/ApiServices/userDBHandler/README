Security Notice:

	Most session authentication can be bypassed by passing a nil sessionKey. It is the caller's responsibility to ensure that they are acquiring a non-nil session key when exposing this package to external sources.
	
Development Notes:

	go-bindata is used to avoid having to copy the sql to every user of the data.

	Ensure go-bindata is installed: go get -u github.com/jteeuwen/go-bindata/...

	When adding or editing sql:
		put inside sql directory as 'handle'.sql
	
		it must be added to the dbHandler as a constant then added to the statements.
		
		run 'go-bindata -pkg="userDB" sql' to regenerate bindings

Deployment Notes:
	
	Copy sql into directory beside binary.
	
	Create certs directory beside binary and follow instructions in testing for generating the trust chain.
	
	NOTE: This package is not safe for use with anything except self signed certificates where the root ca is equal to the server certificate.
	
Testing Setup:

	Generate a key for the server if it doesn't already have one:
		openssl genrsa -aes256 -out server.key 2048
	Decrypt the key
		openssl rsa -in server.key -out server.key
	Build the cert
		openssl req -new -key server.key -days 3650 -out server.crt -x509
	Make the trust root the same as the server cert
		cp server.key root.key
	
	Drop the cert, key, and root cert into the postgres data directory.
	Set appropriate permissions if production.
	
	Uncomment the 'ssl = on' line in postgresql.conf
	
	Restart the server.
	
	Login with psql as usermanager or postgres, it should state that it is using ssl.
	
	Copy the server.crt to certs as 'server.crt'
	
	Configure the connection by editing postgres.config.json
	
	Run tests with 'go test . -cpu=3 -parallel=20 -cover'