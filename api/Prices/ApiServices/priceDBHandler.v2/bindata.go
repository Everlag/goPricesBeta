// Code generated by go-bindata.
// sources:
// sql/addPriceMKMprice.sql
// sql/addPriceMTGprice.sql
// sql/historicalPriceMKMprice.sql
// sql/historicalPriceMTGprice.sql
// sql/medianMKM.sql
// sql/medianMtgprice.sql
// sql/mkmPriceClosest.sql
// sql/mkmPriceLastest.sql
// sql/mkmPriceLatestHighest.sql
// sql/mkmPriceLatestLowest.sql
// sql/mkmPriceSetLatest.sql
// sql/mtgPriceClosest.sql
// sql/mtgPriceLatest.sql
// sql/mtgPriceLatestHighest.sql
// sql/mtgPriceLatestLowest.sql
// sql/mtgPriceSetLatest.sql
// DO NOT EDIT!

package priceDB

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sqlAddpricemkmpriceSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8d\x31\xae\xc2\x30\x0c\x86\xf7\x48\xb9\x83\x87\x0e\xaf\x55\xf4\xaa\xf7\x80\x03\x30\x30\x74\x29\x12\xf4\x02\x56\xe2\x16\x0b\x9a\x54\x89\x0b\xd7\x27\xa1\x33\xc3\x67\x59\xbf\x3f\xeb\x6f\x1b\xad\xb4\x3a\x3a\x97\x00\xc1\xd3\x0b\x96\xc8\x96\x60\x09\xec\x05\xc6\x10\x73\x9a\x16\xb2\x3c\xb2\x05\x8b\xd1\x01\x7a\x57\x1c\x2f\xec\x27\x08\x23\xc8\x0d\x45\xab\xcf\x49\xc2\xf6\x9d\x7e\x67\x9c\xd8\x96\x6c\xc6\x78\x27\x29\x15\x4d\x5b\x66\xd7\x5f\x4f\x97\x01\xba\x7e\x38\x7f\x75\x7f\x3c\xce\x64\x20\x91\x18\x10\x2e\x2b\xad\x31\x98\xcd\xaf\xb5\x7a\xe2\x63\xa5\x94\xbd\xea\xcf\x40\xf5\x9f\xd9\x65\xf6\x99\x43\xfd\x0e\x00\x00\xff\xff\x98\xb7\x68\x2b\xcf\x00\x00\x00")

func sqlAddpricemkmpriceSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlAddpricemkmpriceSql,
		"sql/addPriceMKMprice.sql",
	)
}

func sqlAddpricemkmpriceSql() (*asset, error) {
	bytes, err := sqlAddpricemkmpriceSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/addPriceMKMprice.sql", size: 207, mode: os.FileMode(438), modTime: time.Unix(1435096674, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _sqlAddpricemtgpriceSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x8c\xbd\xae\xc2\x30\x0c\x85\xf7\x48\x79\x87\x33\x74\xb8\xad\xaa\x5b\xf1\xf3\x02\x0c\x0c\x5d\x8a\x04\x7d\x81\x28\x49\x8b\x25\xea\x54\x8d\x81\xd7\x27\x09\x23\xc3\xb1\x8e\xfc\x7d\x76\xd7\x68\xa5\xd5\xc9\xb9\x08\x03\xf6\x6f\xac\x1b\x59\x8f\x35\x10\x0b\xa6\xb0\xa5\x6d\x5c\xbd\xa5\x89\x2c\xac\xd9\x1c\x0c\xbb\xec\xb0\x10\xcf\x08\x13\xe4\x6e\x44\xab\x82\x24\x7c\xaf\xe3\xff\x22\x73\x69\xf9\x77\xd3\xe5\xd9\x0f\xb7\xf3\x75\x44\x3f\x8c\x97\x5f\xe9\x8f\xcd\xe2\x5b\x44\x2f\x2d\x84\x72\x2d\xa0\xd6\xea\x65\x1e\x4f\x1f\x93\x51\xed\x5a\x54\xfb\x94\x43\xca\xb1\xfe\x04\x00\x00\xff\xff\x19\xc4\x61\xec\xb7\x00\x00\x00")

func sqlAddpricemtgpriceSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlAddpricemtgpriceSql,
		"sql/addPriceMTGprice.sql",
	)
}

func sqlAddpricemtgpriceSql() (*asset, error) {
	bytes, err := sqlAddpricemtgpriceSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/addPriceMTGprice.sql", size: 183, mode: os.FileMode(438), modTime: time.Unix(1435096704, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _sqlHistoricalpricemkmpriceSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2c\xcc\x3d\xcb\xc2\x30\x14\xc5\xf1\x3d\x90\xef\x70\x86\x4e\xa5\x3c\xe5\x71\xef\x20\x1a\x71\xf0\x05\xaa\xe0\x7c\x89\xb7\xe5\x62\x9b\x94\x9b\xf4\xfb\x6b\xc4\xed\xfc\x87\xf3\x6b\x6b\x6b\x7a\xce\xab\x86\x04\x9a\x26\x2c\x2a\x9e\x13\x86\xa8\xa0\x12\x21\x4b\x18\x11\x87\x4f\xa5\x85\xbd\x0c\xe2\xe1\x49\x9f\xd6\xd4\xad\x35\xd6\xdc\xdc\xc9\xed\xee\x08\x34\x73\x83\xc4\xb9\x41\x96\x32\xbf\x4e\x03\x5e\x35\xe2\xd0\x5f\xcf\x3f\xf8\x6f\xa6\x51\x7c\x01\x66\xd2\x17\x67\x3c\x8e\xae\x77\xd6\x94\x7f\x57\xfd\x63\x7b\xd9\x17\xa5\xab\x36\xef\x00\x00\x00\xff\xff\x6e\x35\xee\x57\x99\x00\x00\x00")

func sqlHistoricalpricemkmpriceSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlHistoricalpricemkmpriceSql,
		"sql/historicalPriceMKMprice.sql",
	)
}

func sqlHistoricalpricemkmpriceSql() (*asset, error) {
	bytes, err := sqlHistoricalpricemkmpriceSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/historicalPriceMKMprice.sql", size: 153, mode: os.FileMode(438), modTime: time.Unix(1435358627, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _sqlHistoricalpricemtgpriceSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd7\xe2\xe5\x0a\x4a\x2d\x29\x2d\xca\x2b\x56\x48\xcc\xc9\x51\x28\x28\xca\x4c\x4e\x2d\x56\x48\xcb\x2f\x52\x48\x04\x71\xf2\x4a\x32\xf3\xd2\x15\xf2\xd3\x80\xbc\xe2\x82\xd4\xe4\xcc\xb4\xcc\x64\x85\xe4\xc4\xa2\x14\x5e\x2e\x2d\x7d\x5e\x2e\x5e\xae\x60\x57\x1f\x57\xe7\x10\x85\xbc\xc4\xdc\x54\x1d\x85\xe2\xd4\x12\x1d\x85\x92\x4c\x10\x13\x6c\x8e\x82\x5b\x90\xbf\x2f\xd4\x48\xbd\xdc\x92\x74\x88\x60\xb8\x87\x6b\x90\x2b\x2f\x17\x48\x8b\xad\x8a\xa1\x82\xa3\x9f\x0b\x48\xa3\xad\x8a\x11\x20\x00\x00\xff\xff\x80\x2b\x9c\x34\x8c\x00\x00\x00")

func sqlHistoricalpricemtgpriceSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlHistoricalpricemtgpriceSql,
		"sql/historicalPriceMTGprice.sql",
	)
}

func sqlHistoricalpricemtgpriceSql() (*asset, error) {
	bytes, err := sqlHistoricalpricemtgpriceSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/historicalPriceMTGprice.sql", size: 140, mode: os.FileMode(438), modTime: time.Unix(1435358616, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _sqlMedianmkmSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\xcd\x4d\x6a\xc3\x30\x10\xc5\xf1\xbd\x40\x77\x78\x8b\x40\x3e\x08\x0d\xed\xb6\xe4\x12\xbd\x40\x99\x48\x2f\x8a\xb0\x25\x99\xd1\x18\xe3\xdb\xb7\x2e\xed\xb2\xd9\xcd\x62\xde\xff\x77\x39\x79\xf7\x41\x9b\xb5\x76\xd8\x83\x58\xc8\x61\x5c\x21\x29\x29\x93\x18\x51\x18\xb3\x54\xdc\x9b\x42\x50\xa5\x10\x52\x23\x3a\x0d\xa1\x95\x5b\xae\x62\xb9\x55\xef\x4e\x17\xef\x3a\x47\x06\x43\xfc\x9e\x7d\x9a\xce\x35\x1c\xf6\x5b\x6e\x7f\x86\xe5\xc2\xe3\xf9\xb7\x75\x98\x34\x07\x1e\x71\xd7\x56\xf0\x73\xf7\x97\x22\x29\x87\x20\x1a\x8b\xe8\x40\xf3\x6e\x79\x50\xe9\xdd\x06\x5e\x77\xaf\x7f\xe6\x75\xf7\xe6\x5d\xd2\x36\x4f\xb8\xad\xff\x42\x68\x1a\xa9\x4f\x3f\x22\x7b\x78\xff\x0a\x00\x00\xff\xff\x8f\xd1\x34\x14\xfc\x00\x00\x00")

func sqlMedianmkmSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlMedianmkmSql,
		"sql/medianMKM.sql",
	)
}

func sqlMedianmkmSql() (*asset, error) {
	bytes, err := sqlMedianmkmSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/medianMKM.sql", size: 252, mode: os.FileMode(438), modTime: time.Unix(1435187634, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _sqlMedianmtgpriceSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x8d\x4b\x6a\xc4\x30\x10\x44\xf7\x02\xdd\xa1\x16\x03\xf3\x61\xc8\x90\x6c\xc3\x5c\x22\x17\x08\xb2\x54\x96\x45\x2c\xc9\xb4\xda\x18\xdf\x3e\xb6\x49\x96\xc9\xaa\xdf\xa2\xeb\xbd\xc7\xcd\x9a\x0f\xea\x2c\xa5\x41\x07\x62\x21\xbf\xc6\x15\x2e\x46\x61\x74\x4a\x64\x86\xe4\x0a\xfa\x2a\x70\x28\x2e\x13\xae\x04\x34\x2a\x7c\xcd\x5d\x2a\x4e\x53\x2d\xd6\xdc\x1e\xd6\x34\x8e\xf4\x8a\xb0\xcd\x3e\x55\xe6\xe2\x2f\xe7\x5d\x77\xbe\x43\x53\xe6\xf5\xfe\xe3\xba\x4c\x92\x3c\xaf\xe8\xa5\x66\x1c\xdc\x5e\xb2\xc6\x83\xac\x59\x06\xca\x76\xf6\xd2\xf3\xf4\xfa\x1b\x7b\x9e\xde\xac\x89\x52\xe7\x09\xdd\xfa\x67\x01\x55\x02\xe5\xdf\x8f\xc0\xe6\xdf\xbf\x03\x00\x00\xff\xff\xd0\xe4\x77\x65\xf5\x00\x00\x00")

func sqlMedianmtgpriceSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlMedianmtgpriceSql,
		"sql/medianMtgprice.sql",
	)
}

func sqlMedianmtgpriceSql() (*asset, error) {
	bytes, err := sqlMedianmtgpriceSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/medianMtgprice.sql", size: 245, mode: os.FileMode(438), modTime: time.Unix(1435187618, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _sqlMkmpriceclosestSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x90\x3f\x8f\xda\x40\x10\xc5\x7b\x4b\xfe\x0e\x53\x50\x00\x72\x40\x24\x65\x44\x24\xfa\x54\x09\x52\x94\x72\xbc\x3b\xb6\x47\xb7\x7f\x60\x77\x6c\x8e\x6f\x7f\xe3\xdd\xa3\xb8\x0a\x3c\x6f\xf6\xf7\xde\xbc\xe3\xbe\x6d\xfe\x90\xcc\x29\x64\x90\x89\xe0\x96\xd8\x10\x0c\x31\x01\xc2\xc8\x0b\x05\x30\x98\xec\x31\x93\x80\x89\xbe\xe7\x80\xc2\x31\xb4\xcd\x83\x65\x02\x61\x4f\x60\x5c\xcc\x94\x05\x24\x7e\x02\xe2\xc2\x96\x6c\x11\x0f\x6d\xd3\x36\x57\x9d\xa2\xb9\xcf\x9c\x74\x5a\xf9\x0f\x76\x0e\x2e\xbf\xff\x5d\xfe\xff\x85\x5e\xd5\x41\x28\xc1\xea\x29\x85\x51\xb8\x2f\xd0\x01\xae\x93\xce\x3d\xa1\x46\x44\xb8\xcf\x94\x9e\xfa\x48\x23\x52\x59\xce\x82\x49\x20\x0e\x60\x51\xb0\x92\x53\x39\x08\x42\x94\x89\xc3\xb8\x02\x38\x03\xd7\x03\x7b\x9a\x70\xe1\x38\x27\x78\x10\x58\xca\x9a\x0a\xb0\x4a\xe8\x34\xc6\x7a\xe0\xa2\x09\xe3\xec\x6c\x31\x55\x35\xf3\x18\x14\xa4\xee\x59\x7f\xdc\x97\x96\xd4\x4e\x8d\x29\x97\xaf\x12\xa1\x06\xaa\x15\xbe\xca\xd3\x22\xf6\xc7\xb5\x8c\x4c\x8e\x8c\x40\x40\x4f\x1d\xa8\xd0\x95\x63\xbb\x4a\xec\x80\xe6\x14\x61\x48\xd1\xd7\x41\x3e\x78\x1c\xd9\xac\x14\x8f\xe9\x8d\x44\x8b\x9f\x48\x13\xaf\xef\xcf\x9b\x13\x60\xb0\x2b\xe5\xbc\xf9\x5e\xfe\x6e\x7e\xc0\xaf\x02\x6c\x9b\x98\xac\x76\xda\x3f\xdb\x06\xfb\xbc\xa5\x77\x49\x68\x64\x4b\xb7\x68\xa6\x6a\xa0\xbb\xdf\xca\xee\x6e\xd7\x36\x8e\x3d\x0b\x9c\x7e\x7e\x04\x00\x00\xff\xff\xad\xd4\xae\x78\x0f\x02\x00\x00")

func sqlMkmpriceclosestSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlMkmpriceclosestSql,
		"sql/mkmPriceClosest.sql",
	)
}

func sqlMkmpriceclosestSql() (*asset, error) {
	bytes, err := sqlMkmpriceclosestSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/mkmPriceClosest.sql", size: 527, mode: os.FileMode(438), modTime: time.Unix(1435432028, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _sqlMkmpricelastestSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x24\x8c\xc1\x6a\x84\x30\x18\x84\xef\x81\xbc\xc3\x1c\x3c\x89\x28\xf6\x5a\x3c\xb4\x9a\x52\x41\x2b\x44\xa1\xf4\x98\xc6\xb4\x0d\xdd\x24\x92\xfc\xbe\xff\xaa\x7b\x9a\x8f\x61\xe6\xab\x72\xce\xa4\xa1\x3d\xfa\x04\xfa\x33\xb8\x29\x32\x89\xb0\x6f\xeb\x01\xf8\x09\x11\x0a\x5a\xc5\xb5\x4a\x86\xa0\x83\xfb\xb6\x5e\x91\x0d\xbe\xe4\x2c\xaf\x38\xe3\x6c\x16\x83\x68\x17\x78\xe5\x4c\x81\x63\x54\x80\xec\x89\x5b\xb4\xfa\x08\xb3\xc7\x80\x37\x39\x8d\x8f\x22\x95\x4e\xfd\x5a\x7d\x1a\x9d\x8a\xff\x86\x38\xfb\x7c\x17\x52\x5c\xff\x26\xab\xf1\xf2\xd1\x9d\x96\x26\x7b\xe2\x6c\x92\x9d\x90\x78\xfd\xba\x8c\xe8\xc4\xdc\x62\xe8\xc7\x7e\x41\xfd\x7c\x0f\x00\x00\xff\xff\x0f\xed\x56\xa9\xb7\x00\x00\x00")

func sqlMkmpricelastestSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlMkmpricelastestSql,
		"sql/mkmPriceLastest.sql",
	)
}

func sqlMkmpricelastestSql() (*asset, error) {
	bytes, err := sqlMkmpricelastestSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/mkmPriceLastest.sql", size: 183, mode: os.FileMode(438), modTime: time.Unix(1435116688, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _sqlMkmpricelatesthighestSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x91\x41\x4f\x02\x31\x14\x84\xef\x4d\xfa\x1f\xe6\xe0\x01\x08\x82\x9c\x8d\x1e\x84\x8d\xd9\x04\x21\x01\x2e\x1e\x9b\xf2\x60\x1b\xb7\xed\xa6\x7d\x04\xe3\xaf\xb7\xed\x1a\xd0\x8b\xf1\xe2\xed\xa5\x6f\xe6\x9b\x69\x3b\x1d\x49\xf1\x4c\x1c\xc1\x0d\xa1\xf5\x67\x8a\x3c\x70\xde\xdd\x7e\x50\xf0\x43\x74\xc1\x68\x82\x3f\x94\xad\x56\x61\x0f\xa5\x83\x8f\x11\xaa\x6d\xf3\xd2\xb1\x71\xc7\x88\x83\x0f\x45\x61\x7d\x64\x04\xd2\xe4\xf8\x6a\x25\xa5\x9b\x8b\x76\x22\xc5\xb7\xbc\xc6\x1c\x9b\x14\xf8\x4f\x31\x5b\x22\x98\x94\xd4\xdf\x0a\xda\x9f\x1c\x53\xe8\x54\xe0\x42\x52\x0e\xf4\xde\xb5\xca\x29\x36\xde\x65\xc4\xb9\x51\x0c\xab\x8e\x46\x27\x1f\x3a\x0a\x49\x66\xa3\x14\xa3\x69\xc6\xf5\xc8\x96\x34\xc3\x29\x4b\x63\x44\xe2\x31\xd8\xe4\xb1\xb4\x18\x83\x4e\xc1\xe3\x10\xbc\x85\x14\x83\xa2\xaf\x96\xd5\x7c\x87\x45\xbd\xdd\xd5\xab\x34\xac\x57\x83\xe4\x1a\xfe\x01\x50\x0e\xe2\xa4\xb4\xc9\x2f\x62\x55\x78\x23\x96\xe2\xdc\x50\xa0\xe2\x7f\xb8\x99\xa5\x3b\xec\x7b\xe5\xe3\x5d\x9e\xa5\x48\x48\x18\xf7\x95\x1e\xfb\xb6\x7b\x13\xd3\x9b\x68\xee\xa3\x7f\xa1\xe3\x07\x3c\x13\x86\x52\xac\x37\x8b\x6a\x83\xa7\xd7\x6b\x5b\x2c\xaa\xed\xbc\x6c\xa1\xd2\x3f\x92\xed\x70\x11\xf5\xdf\x91\x05\x58\xd6\x2f\xf5\x0e\xb3\xfb\xcf\x00\x00\x00\xff\xff\x65\x0a\xbf\x13\x62\x02\x00\x00")

func sqlMkmpricelatesthighestSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlMkmpricelatesthighestSql,
		"sql/mkmPriceLatestHighest.sql",
	)
}

func sqlMkmpricelatesthighestSql() (*asset, error) {
	bytes, err := sqlMkmpricelatesthighestSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/mkmPriceLatestHighest.sql", size: 610, mode: os.FileMode(438), modTime: time.Unix(1435282631, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _sqlMkmpricelatestlowestSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x51\x4d\x6f\xd3\x40\x10\x3d\xb3\xd2\xfe\x87\x77\xe0\x10\x57\xa6\xa5\xe7\xaa\x48\x90\x44\xc8\x52\x68\xa5\x3a\x17\x8e\x53\x7b\x12\xaf\x62\xef\x86\xdd\x0d\x06\x7e\x3d\x3b\xeb\x86\x14\x51\x28\x08\xc9\x87\x91\xe7\xcd\xfb\xda\x8b\x33\xad\xde\x73\x0c\x88\x1d\xa3\x77\x23\x87\x38\xb3\xce\xbe\xfa\xc6\xde\x15\xd8\x7b\xd3\x30\xdc\x26\x6f\x1b\xf2\x2d\xa8\xf1\x2e\x04\x50\xdf\xcb\xd2\x46\x63\xb7\x01\x1b\xe7\x33\x62\x70\x21\xc2\x73\xc3\x36\x9e\x4e\x99\x9a\xee\x07\xf6\x5c\x2b\xad\xd6\x9d\x09\x48\x1f\xa1\x71\xc3\xbe\xe7\x2f\xf8\x74\x60\xff\x35\x51\x50\x44\xeb\x58\x36\xbd\x8b\x72\x3c\x3a\xbf\xcb\xf4\x87\x00\x6f\xb6\x5d\x84\xb1\x59\xaa\xa5\x48\xf7\x14\xb8\xd4\xaa\xc2\xbd\x67\xda\xc1\xc8\xf1\x68\xd1\xb1\x67\x91\xd9\x72\x7c\xc6\x55\xe0\xf8\x38\x5c\x89\xd6\x84\xe4\xb2\x49\x7f\xad\x44\x74\xa3\xf4\x62\x82\x56\x02\xaf\x39\xae\x28\xa6\x82\x70\xad\xd5\x8b\x7a\xb9\x5a\xce\xd7\x58\x54\xf5\xba\xba\x49\xc3\xed\xcd\x2c\xd1\x15\xb0\x34\x70\x29\xcc\x25\xa2\x91\x71\x92\xdc\x78\x37\x4c\x63\x38\x1f\x68\x6b\x1a\x11\x1c\xc8\xef\x92\x85\x51\x1c\xe7\xc3\xeb\x97\x97\x20\xdb\x66\x63\x53\xd0\x24\x1a\x8e\x61\x9e\xf2\x8c\x91\xd1\xd1\x67\x16\xc7\x29\xa3\xf3\xad\x56\x0f\x67\xd9\x66\x32\xd5\x73\x0a\x74\x4c\x36\x99\xfc\x6b\x37\x85\x68\xd7\x13\xc5\x9f\x92\xcd\x7e\x2a\xa8\xc0\xed\xdd\x62\x79\x87\x77\x1f\x4f\x70\x2c\x96\xf5\xbc\x00\xa5\x46\x79\xd8\x5f\x09\xef\xd9\xc5\xb3\xec\x25\xf8\xe0\xdd\xa4\xa1\xd5\x2c\xe3\xff\xa9\xf8\xc7\x04\x4f\x07\xd6\xea\xd7\xfe\x33\xf2\xcd\x6b\x99\xb5\x9a\x1e\xe3\x41\xfd\xff\xea\x14\x86\x54\xe9\x6f\xda\xc9\xdb\x63\x43\xa7\x0a\xa7\x9a\xdf\xd6\x73\xac\xaa\x0f\xd5\x1a\x97\x57\xdf\x03\x00\x00\xff\xff\xeb\xd7\xc9\x9c\xb5\x03\x00\x00")

func sqlMkmpricelatestlowestSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlMkmpricelatestlowestSql,
		"sql/mkmPriceLatestLowest.sql",
	)
}

func sqlMkmpricelatestlowestSql() (*asset, error) {
	bytes, err := sqlMkmpricelatestlowestSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/mkmPriceLatestLowest.sql", size: 949, mode: os.FileMode(438), modTime: time.Unix(1435282638, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _sqlMkmpricesetlatestSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\xcf\x41\x4e\x86\x30\x10\xc5\xf1\x7d\x93\xde\xe1\x2d\x5c\x7c\xb0\x80\x70\x00\x2e\xe1\x0d\x6a\xfb\x90\x89\xb4\x35\xd3\x11\xc3\xed\xb5\x62\xe2\xd6\xed\xfc\xf3\x7b\xc9\xcc\xa3\x77\xcf\xb4\x0f\x2d\x0d\xb6\x13\x47\x30\x36\xc3\xbb\x4a\x24\xb6\xaa\xe0\x49\xbd\x10\x83\x26\x48\x41\xf8\x2e\xf5\x94\xc4\x84\x46\x9b\xbc\x1b\x67\xef\xbc\x6b\x3c\x18\x0d\x23\x36\xad\xf9\xc6\x6d\xca\xe1\x55\x62\x87\x39\xe8\x1b\x0d\x9f\x3b\x95\x9d\xad\x4f\x0b\x42\x49\x30\xc9\x5c\x1f\xbf\x36\x49\x33\x29\xd1\x1e\xfd\x3a\xfc\x7f\xa8\x6a\xa2\xe2\xe5\xfa\x59\x43\x62\x8b\x38\x24\x8b\x61\x19\xfe\xda\xfd\x4e\x8f\x5f\x01\x00\x00\xff\xff\xc9\x8c\xbc\xcb\xf0\x00\x00\x00")

func sqlMkmpricesetlatestSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlMkmpricesetlatestSql,
		"sql/mkmPriceSetLatest.sql",
	)
}

func sqlMkmpricesetlatestSql() (*asset, error) {
	bytes, err := sqlMkmpricesetlatestSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/mkmPriceSetLatest.sql", size: 240, mode: os.FileMode(438), modTime: time.Unix(1441343196, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _sqlMtgpriceclosestSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x90\x3f\x6f\xc2\x30\x10\xc5\xf7\x48\xf9\x0e\x37\x30\x00\xa2\x20\xda\xb1\xa2\x12\x7b\xa7\x16\xa9\xea\x78\xb1\x8f\xe4\x24\xff\x01\xfb\x12\xca\xb7\xef\xc5\x2e\x43\xa7\x38\xf7\xe7\xf7\xde\xbd\xdd\xba\x6d\x3e\x48\xc6\x14\x32\xc8\x40\x70\x49\x6c\x08\xce\x31\x01\x42\xcf\x13\x05\x30\x98\xec\x2e\x93\x80\x89\xbe\xe3\x80\xc2\x31\xb4\xcd\x8d\x65\x00\x61\x4f\x60\x5c\xcc\x94\x05\x24\xfe\x01\xe2\xc4\x96\x6c\x69\x6e\xdb\xa6\x6d\x4e\x5a\x45\x73\x1d\x39\x69\xb5\xf2\x6f\xec\x1c\x1c\xdf\xbf\x8e\xdf\x9f\xd0\x69\xf7\x2c\x94\x60\xd6\x94\xc2\x28\xdc\x07\x68\x0b\xa7\x41\xeb\x9e\x50\x2d\x22\x5c\x47\x4a\x77\x5d\x52\x8b\x54\x86\xb3\x60\x12\x88\x67\xb0\x28\x58\xc9\xa9\x1c\x04\x21\xca\xc0\xa1\x9f\x01\x9c\x81\xeb\x81\x1d\x0d\x38\x71\x1c\x13\xdc\x08\x2c\x65\x75\x05\x58\x5b\xe8\xd4\xc6\x7c\xe0\xa4\x0e\xe3\xe8\x6c\x11\xd5\x6e\xe6\x3e\x28\x48\xd5\xb3\x7e\xdc\xbf\x94\x54\x4e\x85\x29\x97\xbf\x62\xa1\x1a\xaa\x11\x3e\xc2\xd3\x20\xd6\xbb\x39\x8c\x4c\x8e\x8c\x40\x40\x4f\x1b\xd0\xc6\xa6\x1c\xbb\x79\x10\x53\xf4\xf5\x99\xb7\x5e\xfa\xf2\xd2\xac\x07\x52\x93\xf3\xca\x61\xb1\x07\x0c\x76\x5e\x3c\x2c\x9e\xcb\x73\xf1\x02\x6f\x85\xd1\x36\x31\x59\x8d\xb1\xbb\xb7\x0d\x76\x79\x49\x3f\x92\xd0\xc8\x92\x2e\xd1\x0c\x95\xac\xb3\x4f\x65\x76\xb5\x6a\x1b\xc7\x9e\x05\xf6\xaf\xbf\x01\x00\x00\xff\xff\xcb\x0f\x19\x19\x02\x02\x00\x00")

func sqlMtgpriceclosestSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlMtgpriceclosestSql,
		"sql/mtgPriceClosest.sql",
	)
}

func sqlMtgpriceclosestSql() (*asset, error) {
	bytes, err := sqlMtgpriceclosestSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/mtgPriceClosest.sql", size: 514, mode: os.FileMode(438), modTime: time.Unix(1435431998, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _sqlMtgpricelatestSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x24\xcc\xc1\x0b\x82\x30\x1c\xc5\xf1\xfb\x60\xff\xc3\x3b\x78\x12\x51\xec\x1a\x1e\x4a\x17\x09\x9a\x30\x85\xe8\xb8\x74\xd5\x20\xa7\x6c\x3f\xff\xff\xd4\x6e\x9f\xc3\xfb\xbe\x24\xe4\x4c\x6a\x5a\x9c\xf5\xa0\x8f\xc6\x57\x91\xf6\x84\x65\x1e\x56\xe0\x35\x39\x28\xf4\xca\x0d\x89\xd7\x84\x7e\x1a\x9f\xc6\x2a\x32\x93\x8d\x39\x0b\x13\xce\x38\x6b\x45\x25\xf2\x0e\x56\x8d\x3a\xc2\x3a\x8a\x40\x66\xe3\xec\x4c\xaf\x71\x91\x4d\xfd\xa7\x8f\x47\x7a\xef\xe2\xec\x7e\x15\x52\xec\x49\x16\xa4\x38\xdd\x8a\x2d\xcc\x82\x03\x67\x8d\x2c\x84\xc4\xf9\xb1\x9f\xa0\x10\x6d\x8e\xaa\xac\xcb\x0e\xe9\xf1\x17\x00\x00\xff\xff\x43\xd3\x86\x0d\xaa\x00\x00\x00")

func sqlMtgpricelatestSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlMtgpricelatestSql,
		"sql/mtgPriceLatest.sql",
	)
}

func sqlMtgpricelatestSql() (*asset, error) {
	bytes, err := sqlMtgpricelatestSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/mtgPriceLatest.sql", size: 170, mode: os.FileMode(438), modTime: time.Unix(1435270896, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _sqlMtgpricelatesthighestSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x91\x4f\x6b\x02\x31\x10\xc5\xef\x81\x7c\x87\x77\xe8\x41\x45\xb4\x9e\x4b\x7b\xa8\x2e\x65\xc1\x2a\xa8\x97\x1e\x43\x1c\x77\x03\x9b\x64\x49\xa6\xd8\x8f\xdf\xfc\x29\xb6\x85\xd2\xdb\x63\xe7\xf7\x7e\x33\x6c\x96\x33\x29\x5e\x88\x23\xb8\x27\xf4\xa6\xeb\x29\x32\xc6\x60\x34\xc1\x5f\xca\x47\xad\xc2\x19\x4a\x07\x1f\x23\xd4\x30\xe4\xa1\x63\xe3\xba\x88\x8b\x0f\x85\xb0\x3e\x75\x02\x69\x72\x3f\xaa\xa4\x74\x7f\x63\x17\x52\x48\x71\x24\x82\x49\x9b\x06\x7f\xcd\x4b\xb4\x7f\x77\x4c\x61\x54\x81\x8b\x49\x39\xd0\xc7\x38\x28\xa7\xd8\x78\x97\x15\xd7\x5e\x31\xac\xea\x8c\x4e\x3d\x8c\x14\x12\x66\xa3\x14\xb3\x65\xd6\x55\xe5\x40\x9a\xe1\x94\xa5\x39\x22\xf1\x1c\x6c\x72\xac\x57\x5c\x82\xb7\x90\x62\x52\xc8\x66\xdb\xac\x4f\xd8\xb4\xc7\x53\xbb\x4b\x61\xbf\x9b\x24\x7e\xfa\x6f\xb5\xc4\xb8\xb0\xdc\x95\x24\xc5\xb5\xa7\x40\xa5\xf2\x78\xb7\x4a\x07\x9f\x2b\xf2\x74\x9f\xb3\x14\xc9\x02\xe3\xbe\x16\xc6\x7a\xda\xd9\xc4\xf4\x03\x34\xd7\x6d\x7f\x69\xf1\xcb\x9a\xab\x53\x29\xf6\x87\x4d\x73\xc0\xf3\xdb\xf7\x65\xd8\x34\xc7\x75\x99\x42\xa5\xd7\x22\x3b\xe2\x06\x55\x4f\x06\xb0\x6d\x5f\xdb\x13\x56\x0f\x9f\x01\x00\x00\xff\xff\x57\xab\xfd\x22\xd8\x01\x00\x00")

func sqlMtgpricelatesthighestSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlMtgpricelatesthighestSql,
		"sql/mtgPriceLatestHighest.sql",
	)
}

func sqlMtgpricelatesthighestSql() (*asset, error) {
	bytes, err := sqlMtgpricelatesthighestSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/mtgPriceLatestHighest.sql", size: 472, mode: os.FileMode(438), modTime: time.Unix(1435432870, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _sqlMtgpricelatestlowestSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x50\xcd\x8e\xd3\x30\x10\x3e\x63\xc9\xef\x30\x07\x0e\xc9\x2a\xec\xb2\xe7\xd5\x22\x41\x1b\xa1\x48\x65\x2b\x35\xb9\x70\x74\x93\x69\x62\x35\xb1\x8b\x3d\x25\xc0\xd3\xe3\xb1\x5b\x0a\xe2\xa7\x08\xa4\x28\x1a\x79\xe6\xfb\xbd\xbb\x91\xe2\x2d\x92\x07\x1a\x10\x46\x3b\xa3\xa7\xcc\x58\xf3\xe2\x0b\x3a\x9b\xc3\xc1\xe9\x16\xc1\xee\xe2\xb6\x55\xae\x03\xd5\x3a\xeb\x3d\xa8\x71\xe4\xa5\x21\x6d\x7a\x0f\x3b\xeb\xe2\xc5\x64\x3d\x81\xc3\x16\x0d\x5d\xa0\xa8\xda\xe1\xdb\xed\xad\x14\x52\x34\x83\xf6\x10\x3e\x05\xad\x9d\x0e\x23\x7e\x82\x0f\x47\x74\x9f\x03\x85\x22\xe8\x2c\xf2\x66\xb4\xc4\xe0\xd9\xba\x7d\xa4\x3f\x7a\x70\xba\x1f\x08\xb4\x89\x52\x9d\x22\xb5\x55\x1e\x0b\x29\x2a\xd8\x3a\x54\x7b\xd0\x0c\x9e\x0d\x0c\xe8\x90\x65\x7a\xa4\x2b\xae\x3c\xd2\xf7\xe1\x0a\xe8\xb4\x0f\x2e\xdb\xf0\x6a\x38\xa2\x9d\xb9\x17\xed\xa5\xe0\xf3\x1a\x69\xa5\x28\x14\x04\x8f\x52\x3c\xab\xcb\x55\xb9\x68\x60\x59\xd5\x4d\xf5\x14\x86\xf5\x53\x16\xe8\x72\x30\x6a\xc2\x82\x99\x0b\x20\xcd\x63\x92\xdc\x39\x3b\xa5\xd1\xdf\x4e\xd4\xa7\xc7\x99\xad\x46\xc4\xe3\xf3\x7b\x50\xa6\x8b\x8e\x52\xc2\xa0\xe6\xcf\x29\x7e\x65\x16\x66\x84\x41\x7d\x44\xb6\x1a\xc2\x59\xd7\x49\x71\x82\x45\x7f\xc1\xcd\x88\x21\xc9\x39\x52\x72\x77\xdd\x46\xce\xa2\x75\xc2\xfe\x29\x4b\xf6\x43\x25\x39\xac\x37\xcb\x72\x03\x6f\xde\x5f\xce\x61\x59\xd6\x8b\x1c\x54\xe8\x10\xa7\xc3\x03\xf3\xde\xdc\xf1\xff\x2f\x15\xa4\xc8\xe2\xe5\xff\x17\x2d\xc5\xcf\x4d\xc7\xc5\xab\x97\x3c\x4b\x91\x6a\x3f\x09\xfe\x63\x71\x0c\x0d\xe5\xfd\xa6\x87\xb8\x3d\x77\x71\x29\x2b\xf1\xbc\xae\x17\xb0\xaa\xde\x55\x0d\xdc\x3f\x7c\x0d\x00\x00\xff\xff\x4e\x19\x76\x7e\x91\x03\x00\x00")

func sqlMtgpricelatestlowestSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlMtgpricelatestlowestSql,
		"sql/mtgPriceLatestLowest.sql",
	)
}

func sqlMtgpricelatestlowestSql() (*asset, error) {
	bytes, err := sqlMtgpricelatestlowestSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/mtgPriceLatestLowest.sql", size: 913, mode: os.FileMode(438), modTime: time.Unix(1435270983, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _sqlMtgpricesetlatestSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x8c\x31\x6e\x85\x30\x10\x44\x7b\x4b\xbe\xc3\x14\x29\x80\x02\x44\x1d\x71\x89\xdc\xc0\xb1\x87\xb0\x12\xb6\xa3\xf5\x86\x88\xdb\x27\x84\x48\xbf\xfd\xed\xbc\x79\x6f\x1a\xbc\x7b\xa3\x7d\x69\x69\xb0\x8d\xd8\x83\xb1\x19\x3e\x55\x22\xb1\x56\x05\x0f\xea\x89\x18\x34\x41\x0a\xc2\x2f\xa9\x87\x24\x26\x34\xda\xe8\xdd\x30\x79\xe7\x5d\xe3\xce\x68\x18\xb0\x6a\xcd\xb7\xdc\xc6\x6c\x1f\x77\xe6\x7b\xa3\xf2\xfa\x2f\x2f\x33\x42\x49\x30\xc9\x5c\xba\x7f\x29\x49\x33\x29\xd1\xba\x6b\xed\x9f\x28\x54\x4d\x54\xbc\x9f\x7f\x19\x24\xb6\x88\x5d\xb2\x18\xe6\xfe\xc1\x6e\xef\x82\xaf\x3f\x01\x00\x00\xff\xff\xbd\x15\x77\xd2\xe3\x00\x00\x00")

func sqlMtgpricesetlatestSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlMtgpricesetlatestSql,
		"sql/mtgPriceSetLatest.sql",
	)
}

func sqlMtgpricesetlatestSql() (*asset, error) {
	bytes, err := sqlMtgpricesetlatestSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/mtgPriceSetLatest.sql", size: 227, mode: os.FileMode(438), modTime: time.Unix(1441082607, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sql/addPriceMKMprice.sql": sqlAddpricemkmpriceSql,
	"sql/addPriceMTGprice.sql": sqlAddpricemtgpriceSql,
	"sql/historicalPriceMKMprice.sql": sqlHistoricalpricemkmpriceSql,
	"sql/historicalPriceMTGprice.sql": sqlHistoricalpricemtgpriceSql,
	"sql/medianMKM.sql": sqlMedianmkmSql,
	"sql/medianMtgprice.sql": sqlMedianmtgpriceSql,
	"sql/mkmPriceClosest.sql": sqlMkmpriceclosestSql,
	"sql/mkmPriceLastest.sql": sqlMkmpricelastestSql,
	"sql/mkmPriceLatestHighest.sql": sqlMkmpricelatesthighestSql,
	"sql/mkmPriceLatestLowest.sql": sqlMkmpricelatestlowestSql,
	"sql/mkmPriceSetLatest.sql": sqlMkmpricesetlatestSql,
	"sql/mtgPriceClosest.sql": sqlMtgpriceclosestSql,
	"sql/mtgPriceLatest.sql": sqlMtgpricelatestSql,
	"sql/mtgPriceLatestHighest.sql": sqlMtgpricelatesthighestSql,
	"sql/mtgPriceLatestLowest.sql": sqlMtgpricelatestlowestSql,
	"sql/mtgPriceSetLatest.sql": sqlMtgpricesetlatestSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"sql": &bintree{nil, map[string]*bintree{
		"addPriceMKMprice.sql": &bintree{sqlAddpricemkmpriceSql, map[string]*bintree{
		}},
		"addPriceMTGprice.sql": &bintree{sqlAddpricemtgpriceSql, map[string]*bintree{
		}},
		"historicalPriceMKMprice.sql": &bintree{sqlHistoricalpricemkmpriceSql, map[string]*bintree{
		}},
		"historicalPriceMTGprice.sql": &bintree{sqlHistoricalpricemtgpriceSql, map[string]*bintree{
		}},
		"medianMKM.sql": &bintree{sqlMedianmkmSql, map[string]*bintree{
		}},
		"medianMtgprice.sql": &bintree{sqlMedianmtgpriceSql, map[string]*bintree{
		}},
		"mkmPriceClosest.sql": &bintree{sqlMkmpriceclosestSql, map[string]*bintree{
		}},
		"mkmPriceLastest.sql": &bintree{sqlMkmpricelastestSql, map[string]*bintree{
		}},
		"mkmPriceLatestHighest.sql": &bintree{sqlMkmpricelatesthighestSql, map[string]*bintree{
		}},
		"mkmPriceLatestLowest.sql": &bintree{sqlMkmpricelatestlowestSql, map[string]*bintree{
		}},
		"mkmPriceSetLatest.sql": &bintree{sqlMkmpricesetlatestSql, map[string]*bintree{
		}},
		"mtgPriceClosest.sql": &bintree{sqlMtgpriceclosestSql, map[string]*bintree{
		}},
		"mtgPriceLatest.sql": &bintree{sqlMtgpricelatestSql, map[string]*bintree{
		}},
		"mtgPriceLatestHighest.sql": &bintree{sqlMtgpricelatesthighestSql, map[string]*bintree{
		}},
		"mtgPriceLatestLowest.sql": &bintree{sqlMtgpricelatestlowestSql, map[string]*bintree{
		}},
		"mtgPriceSetLatest.sql": &bintree{sqlMtgpricesetlatestSql, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

