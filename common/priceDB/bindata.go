// Code generated by go-bindata.
// sources:
// sql/addPriceMKMprice.sql
// sql/addPriceMTGprice.sql
// sql/bulkLatest.sql
// sql/historicalPriceMKMprice.sql
// sql/historicalPriceMTGprice.sql
// sql/medianMKM.sql
// sql/medianMtgprice.sql
// sql/mkmPriceClosest.sql
// sql/mkmPriceLastest.sql
// sql/mkmPriceLatestHighest.sql
// sql/mkmPriceLatestLowest.sql
// sql/mkmPriceSetLatest.sql
// sql/mtgPriceClosest.sql
// sql/mtgPriceLatest.sql
// sql/mtgPriceLatestHighest.sql
// sql/mtgPriceLatestLowest.sql
// sql/mtgPriceSetLatest.sql
// DO NOT EDIT!

package priceDB

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sqlAddpricemkmpriceSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8d\x31\xae\xc2\x30\x0c\x86\xf7\x48\xb9\x83\x87\x0e\xaf\x55\xf4\xaa\xf7\x80\x03\x30\x30\x74\x29\x12\xf4\x02\x56\xe2\x16\x0b\x9a\x54\x89\x0b\xd7\x27\xa1\x33\xc3\x67\x59\xbf\x3f\xeb\x6f\x1b\xad\xb4\x3a\x3a\x97\x00\xc1\xd3\x0b\x96\xc8\x96\x60\x09\xec\x05\xc6\x10\x73\x9a\x16\xb2\x3c\xb2\x05\x8b\xd1\x01\x7a\x57\x1c\x2f\xec\x27\x08\x23\xc8\x0d\x45\xab\xcf\x49\xc2\xf6\x9d\x7e\x67\x9c\xd8\x96\x6c\xc6\x78\x27\x29\x15\x4d\x5b\x66\xd7\x5f\x4f\x97\x01\xba\x7e\x38\x7f\x75\x7f\x3c\xce\x64\x20\x91\x18\x10\x2e\x2b\xad\x31\x98\xcd\xaf\xb5\x7a\xe2\x63\xa5\x94\xbd\xea\xcf\x40\xf5\x9f\xd9\x65\xf6\x99\x43\xfd\x0e\x00\x00\xff\xff\x98\xb7\x68\x2b\xcf\x00\x00\x00")

func sqlAddpricemkmpriceSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlAddpricemkmpriceSql,
		"sql/addPriceMKMprice.sql",
	)
}

func sqlAddpricemkmpriceSql() (*asset, error) {
	bytes, err := sqlAddpricemkmpriceSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/addPriceMKMprice.sql", size: 207, mode: os.FileMode(438), modTime: time.Unix(1435096674, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _sqlAddpricemtgpriceSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x8c\xbd\xae\xc2\x30\x0c\x85\xf7\x48\x79\x87\x33\x74\xb8\xad\xaa\x5b\xf1\xf3\x02\x0c\x0c\x5d\x8a\x04\x7d\x81\x28\x49\x8b\x25\xea\x54\x8d\x81\xd7\x27\x09\x23\xc3\xb1\x8e\xfc\x7d\x76\xd7\x68\xa5\xd5\xc9\xb9\x08\x03\xf6\x6f\xac\x1b\x59\x8f\x35\x10\x0b\xa6\xb0\xa5\x6d\x5c\xbd\xa5\x89\x2c\xac\xd9\x1c\x0c\xbb\xec\xb0\x10\xcf\x08\x13\xe4\x6e\x44\xab\x82\x24\x7c\xaf\xe3\xff\x22\x73\x69\xf9\x77\xd3\xe5\xd9\x0f\xb7\xf3\x75\x44\x3f\x8c\x97\x5f\xe9\x8f\xcd\xe2\x5b\x44\x2f\x2d\x84\x72\x2d\xa0\xd6\xea\x65\x1e\x4f\x1f\x93\x51\xed\x5a\x54\xfb\x94\x43\xca\xb1\xfe\x04\x00\x00\xff\xff\x19\xc4\x61\xec\xb7\x00\x00\x00")

func sqlAddpricemtgpriceSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlAddpricemtgpriceSql,
		"sql/addPriceMTGprice.sql",
	)
}

func sqlAddpricemtgpriceSql() (*asset, error) {
	bytes, err := sqlAddpricemtgpriceSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/addPriceMTGprice.sql", size: 183, mode: os.FileMode(438), modTime: time.Unix(1435096704, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _sqlBulklatestSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x53\x4d\x4f\xe4\x48\x0c\x3d\x6f\xa4\xfc\x07\x1f\x90\xb2\xa0\xb0\x08\x8e\x70\x5a\x9a\x85\xd5\x4c\x8f\x18\x01\x62\x0e\x88\x83\x3b\x71\x92\x52\xd7\x47\xc6\x55\xe9\xd0\xf3\xeb\xc7\xae\x80\xe0\xc0\x5c\x5a\x91\xcb\x7e\xef\xf9\x3d\xf7\xc9\x51\x59\xdc\x51\x9a\xd8\x47\x40\x48\x03\x01\x53\x9c\x6c\x82\xd0\xc1\xcf\x89\x78\x6f\x7c\x2f\x0f\x23\xd3\x88\x4c\x2d\xc4\x84\x89\x1c\xf9\x04\x5d\x60\x20\x6c\x06\x68\x90\xdb\xb2\x18\x39\xec\x4c\x4b\xed\x3f\x65\x51\x16\x0f\x83\x89\xcb\x38\xc8\x47\x4b\xd1\xf4\x5e\x86\x75\x64\x8a\x04\xb3\x49\xc3\x3b\x52\x94\xba\xb5\x61\x56\x26\x15\x60\xa5\x1e\xd3\x31\xbd\x24\x26\x87\x82\x8c\x29\x11\x7b\x55\xc4\x59\x29\xec\xd0\x4e\x14\x17\x26\xdc\x52\x2c\x8b\xbf\x0e\x4e\xe1\xf8\x33\x95\x22\xc9\x27\xd3\x19\x62\x6d\x3a\x93\x26\x64\xc6\xbd\x82\xa9\x6e\xf0\xe8\x28\x42\x0a\xd0\x51\x6a\x86\x45\x3b\x41\x87\x4d\x12\x2d\x98\x60\xa6\x37\x54\x40\x6b\x3f\x8a\xde\x90\xac\x43\xda\xa0\x2b\x21\x78\x9a\xa1\x09\xde\x53\x93\x4c\xf0\x65\xe1\x08\xc5\xd3\xf4\xee\x44\x83\x5e\x86\x20\x62\x47\x76\x0f\x3c\xf9\x1a\xd0\xef\xa5\x21\xef\x2d\x5c\xc6\xcb\x62\xa6\xd5\xf5\x97\x02\xc6\x38\xb9\x71\x81\x9b\x8d\xd0\x6f\x98\x70\xfb\x01\x33\x5b\xf0\x3f\x31\x55\x9a\x5e\x9c\x36\x91\x72\x72\x5f\x26\xbf\xb8\x8d\x22\x0e\x7b\x02\x7a\x41\x37\x5a\xaa\x17\xeb\x5d\xea\xbf\xb3\x69\x68\x9d\x9d\x5e\x87\x59\x7e\xcb\x22\xb3\x89\x79\x62\xc6\x86\xde\xbd\x54\x18\x8d\x25\x52\x8c\xa2\x24\x53\x46\xb2\xb2\x66\x36\xaf\x96\x87\x54\x83\xf4\x0b\x20\x74\x1c\x9c\x4e\xfc\x27\x87\xb1\xa0\xff\x5d\x7d\xc6\x56\xd5\x12\x47\x4e\xe2\xa9\x5a\x9b\x7e\x48\x5e\x5d\xb8\x0c\x56\x5e\xa0\xba\xdd\x11\xf7\x1c\x66\x0f\x0f\xc1\x6d\xb4\x72\x9f\x82\x1b\xb5\xe5\x86\x83\xec\xa6\xa5\x6b\x71\xff\x15\xa8\xba\x9f\x65\x3d\x29\x42\xf5\x23\x04\x39\x42\xb8\x0e\x41\x5c\xb2\x36\x6a\xe7\xa5\x95\xa2\x24\x67\xf4\x06\xbf\x19\x71\x2b\x17\xb1\xd9\x36\x96\x70\x47\xb0\xb2\xa6\xeb\xe2\x02\x75\x87\xbd\xf2\xdc\xe1\x4e\xda\xb5\xf1\x91\xb8\x45\xb9\xa4\x15\x26\x6c\x44\x4e\x86\xfc\x6a\xe4\x5a\xc8\xc3\xb5\xf1\xdb\xd7\xc1\x07\x94\x2b\x9f\xb8\xce\x66\xdd\x04\xdb\xea\x33\xfa\x3e\xcb\x6f\x84\xc6\x67\xe0\xdb\xf0\x2b\xc3\x5e\x21\x6f\x61\x15\x7c\x67\x14\xfd\x0d\x82\x5d\xe8\xc3\xbe\xd3\x86\xb5\xb1\x06\x3d\x6a\x9c\x8a\xf8\x48\xc6\x66\xe6\x60\xb1\x1f\xd0\x57\x12\xf9\x2a\x38\x87\xea\x86\x0e\xff\xbb\xe1\x69\x4c\x70\x45\x0d\xee\xab\xe7\xf3\xf3\x24\x7f\xa0\xa7\xe7\xc3\x0b\xcd\xeb\xe8\xe4\xf3\xd4\x92\xd1\xcf\x3f\x46\x77\x70\x5a\xc3\xc1\xd9\xe1\xc5\xef\x00\x00\x00\xff\xff\x8b\x78\x21\x0b\x25\x04\x00\x00")

func sqlBulklatestSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlBulklatestSql,
		"sql/bulkLatest.sql",
	)
}

func sqlBulklatestSql() (*asset, error) {
	bytes, err := sqlBulklatestSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/bulkLatest.sql", size: 1061, mode: os.FileMode(438), modTime: time.Unix(1452150166, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _sqlHistoricalpricemkmpriceSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2c\xce\x31\x4f\xc3\x30\x10\x05\xe0\xdd\x92\xff\xc3\x1b\x3a\x40\x15\xb5\xd0\x81\x05\x75\x40\x10\xc4\x50\x40\x0a\x48\xcc\xc6\xb9\x14\x8b\xd8\x8e\xee\xae\x03\x0b\xbf\x9d\x5c\xe8\x76\x6f\xf8\xde\xbd\xed\xda\xbb\x8e\xf4\xc4\x45\x10\xc6\x11\x13\xa7\x48\x82\xa1\x32\x82\x85\xa2\xa9\x1c\x51\x87\x39\xc9\x44\x31\x0d\x29\x22\x06\xee\x37\xde\x79\x77\x48\x39\xa9\x40\x2b\x6e\xae\xfe\x25\xa6\x3a\x13\xb9\xf8\xdd\x21\xd7\xa2\x5f\x72\x69\xb6\x0f\x1a\xbc\x5b\x6f\xcd\xbc\xb5\x87\xf6\xfe\x1d\x25\x64\x6a\x20\xa4\x0d\x34\xd9\xb9\xf0\x06\x74\xe2\x8a\xc7\xee\xf5\xf9\xbc\x64\x93\xc3\x31\x45\xfb\x98\x03\x7f\x93\xe2\xe3\xa9\xed\x5a\xef\xcc\xef\x57\xd7\xb8\x7b\x79\xb0\x96\xfd\x6a\x87\xca\x3d\x31\x3e\x7f\x96\x42\xf4\x24\x11\xa3\x0d\x9c\xc7\xdd\xfe\x05\x00\x00\xff\xff\xb8\xd0\xf1\xa0\xe7\x00\x00\x00")

func sqlHistoricalpricemkmpriceSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlHistoricalpricemkmpriceSql,
		"sql/historicalPriceMKMprice.sql",
	)
}

func sqlHistoricalpricemkmpriceSql() (*asset, error) {
	bytes, err := sqlHistoricalpricemkmpriceSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/historicalPriceMKMprice.sql", size: 231, mode: os.FileMode(438), modTime: time.Unix(1447439222, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _sqlHistoricalpricemtgpriceSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2c\xce\x31\x4b\xc4\x30\x18\xc6\xf1\x3d\x90\xef\xf0\x0c\x1d\xb4\x14\xab\x1d\x5c\xa4\x83\x68\xc4\xa1\x2a\x54\xc1\x39\x26\x69\x0d\x34\x49\xc9\xfb\xde\x70\xcb\x7d\xf6\x6b\xae\xb7\xe5\x09\xfc\x5e\xfe\x6d\x2d\xc5\xe8\xf8\x90\x23\x41\x2f\x0b\xd6\xec\x8d\x23\x4c\x29\x43\x97\x11\xd9\xc7\x19\x69\xda\x16\xad\xce\xf8\xc9\x1b\x18\x9d\xad\x14\x52\x0c\x3e\x78\x26\x70\xc2\xe3\xfd\x0e\xb1\xa6\x4d\xd0\xcd\xa9\x43\x48\x91\xff\xe9\xb6\x50\xab\x59\x4b\x51\xb7\xc5\x7c\xab\x41\xbd\xfc\x20\xea\xe0\x1a\x90\xe3\x06\xec\xcb\x73\xe7\x6f\xe3\xd7\xc7\x35\xe1\x2e\xf0\xbc\x7f\xfe\xbe\xab\x51\x49\x51\x48\x5f\x3d\xe0\xf9\xf3\xb5\xc0\xbe\xea\x90\xb2\x75\x19\x7f\xc7\xcb\x0d\x58\x47\x06\x4b\x69\xda\x7a\x9e\xce\x01\x00\x00\xff\xff\xd1\xdb\x32\xd1\xd9\x00\x00\x00")

func sqlHistoricalpricemtgpriceSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlHistoricalpricemtgpriceSql,
		"sql/historicalPriceMTGprice.sql",
	)
}

func sqlHistoricalpricemtgpriceSql() (*asset, error) {
	bytes, err := sqlHistoricalpricemtgpriceSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/historicalPriceMTGprice.sql", size: 217, mode: os.FileMode(438), modTime: time.Unix(1447439227, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _sqlMedianmkmSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\xcd\x4d\x6a\xc3\x30\x10\xc5\xf1\xbd\x40\x77\x78\x8b\x40\x3e\x08\x0d\xed\xb6\xe4\x12\xbd\x40\x99\x48\x2f\x8a\xb0\x25\x99\xd1\x18\xe3\xdb\xb7\x2e\xed\xb2\xd9\xcd\x62\xde\xff\x77\x39\x79\xf7\x41\x9b\xb5\x76\xd8\x83\x58\xc8\x61\x5c\x21\x29\x29\x93\x18\x51\x18\xb3\x54\xdc\x9b\x42\x50\xa5\x10\x52\x23\x3a\x0d\xa1\x95\x5b\xae\x62\xb9\x55\xef\x4e\x17\xef\x3a\x47\x06\x43\xfc\x9e\x7d\x9a\xce\x35\x1c\xf6\x5b\x6e\x7f\x86\xe5\xc2\xe3\xf9\xb7\x75\x98\x34\x07\x1e\x71\xd7\x56\xf0\x73\xf7\x97\x22\x29\x87\x20\x1a\x8b\xe8\x40\xf3\x6e\x79\x50\xe9\xdd\x06\x5e\x77\xaf\x7f\xe6\x75\xf7\xe6\x5d\xd2\x36\x4f\xb8\xad\xff\x42\x68\x1a\xa9\x4f\x3f\x22\x7b\x78\xff\x0a\x00\x00\xff\xff\x8f\xd1\x34\x14\xfc\x00\x00\x00")

func sqlMedianmkmSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlMedianmkmSql,
		"sql/medianMKM.sql",
	)
}

func sqlMedianmkmSql() (*asset, error) {
	bytes, err := sqlMedianmkmSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/medianMKM.sql", size: 252, mode: os.FileMode(438), modTime: time.Unix(1435187634, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _sqlMedianmtgpriceSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x8d\x4b\x6a\xc4\x30\x10\x44\xf7\x02\xdd\xa1\x16\x03\xf3\x61\xc8\x90\x6c\xc3\x5c\x22\x17\x08\xb2\x54\x96\x45\x2c\xc9\xb4\xda\x18\xdf\x3e\xb6\x49\x96\xc9\xaa\xdf\xa2\xeb\xbd\xc7\xcd\x9a\x0f\xea\x2c\xa5\x41\x07\x62\x21\xbf\xc6\x15\x2e\x46\x61\x74\x4a\x64\x86\xe4\x0a\xfa\x2a\x70\x28\x2e\x13\xae\x04\x34\x2a\x7c\xcd\x5d\x2a\x4e\x53\x2d\xd6\xdc\x1e\xd6\x34\x8e\xf4\x8a\xb0\xcd\x3e\x55\xe6\xe2\x2f\xe7\x5d\x77\xbe\x43\x53\xe6\xf5\xfe\xe3\xba\x4c\x92\x3c\xaf\xe8\xa5\x66\x1c\xdc\x5e\xb2\xc6\x83\xac\x59\x06\xca\x76\xf6\xd2\xf3\xf4\xfa\x1b\x7b\x9e\xde\xac\x89\x52\xe7\x09\xdd\xfa\x67\x01\x55\x02\xe5\xdf\x8f\xc0\xe6\xdf\xbf\x03\x00\x00\xff\xff\xd0\xe4\x77\x65\xf5\x00\x00\x00")

func sqlMedianmtgpriceSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlMedianmtgpriceSql,
		"sql/medianMtgprice.sql",
	)
}

func sqlMedianmtgpriceSql() (*asset, error) {
	bytes, err := sqlMedianmtgpriceSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/medianMtgprice.sql", size: 245, mode: os.FileMode(438), modTime: time.Unix(1435187618, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _sqlMkmpriceclosestSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x90\x3f\x8f\xda\x40\x10\xc5\x7b\x4b\xfe\x0e\x53\x50\x00\x72\x40\x24\x65\x44\x24\xfa\x54\x09\x52\x94\x72\xbc\x3b\xb6\x47\xb7\x7f\x60\x77\x6c\x8e\x6f\x7f\xe3\xdd\xa3\xb8\x0a\x3c\x6f\xf6\xf7\xde\xbc\xe3\xbe\x6d\xfe\x90\xcc\x29\x64\x90\x89\xe0\x96\xd8\x10\x0c\x31\x01\xc2\xc8\x0b\x05\x30\x98\xec\x31\x93\x80\x89\xbe\xe7\x80\xc2\x31\xb4\xcd\x83\x65\x02\x61\x4f\x60\x5c\xcc\x94\x05\x24\x7e\x02\xe2\xc2\x96\x6c\x11\x0f\x6d\xd3\x36\x57\x9d\xa2\xb9\xcf\x9c\x74\x5a\xf9\x0f\x76\x0e\x2e\xbf\xff\x5d\xfe\xff\x85\x5e\xd5\x41\x28\xc1\xea\x29\x85\x51\xb8\x2f\xd0\x01\xae\x93\xce\x3d\xa1\x46\x44\xb8\xcf\x94\x9e\xfa\x48\x23\x52\x59\xce\x82\x49\x20\x0e\x60\x51\xb0\x92\x53\x39\x08\x42\x94\x89\xc3\xb8\x02\x38\x03\xd7\x03\x7b\x9a\x70\xe1\x38\x27\x78\x10\x58\xca\x9a\x0a\xb0\x4a\xe8\x34\xc6\x7a\xe0\xa2\x09\xe3\xec\x6c\x31\x55\x35\xf3\x18\x14\xa4\xee\x59\x7f\xdc\x97\x96\xd4\x4e\x8d\x29\x97\xaf\x12\xa1\x06\xaa\x15\xbe\xca\xd3\x22\xf6\xc7\xb5\x8c\x4c\x8e\x8c\x40\x40\x4f\x1d\xa8\xd0\x95\x63\xbb\x4a\xec\x80\xe6\x14\x61\x48\xd1\xd7\x41\x3e\x78\x1c\xd9\xac\x14\x8f\xe9\x8d\x44\x8b\x9f\x48\x13\xaf\xef\xcf\x9b\x13\x60\xb0\x2b\xe5\xbc\xf9\x5e\xfe\x6e\x7e\xc0\xaf\x02\x6c\x9b\x98\xac\x76\xda\x3f\xdb\x06\xfb\xbc\xa5\x77\x49\x68\x64\x4b\xb7\x68\xa6\x6a\xa0\xbb\xdf\xca\xee\x6e\xd7\x36\x8e\x3d\x0b\x9c\x7e\x7e\x04\x00\x00\xff\xff\xad\xd4\xae\x78\x0f\x02\x00\x00")

func sqlMkmpriceclosestSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlMkmpriceclosestSql,
		"sql/mkmPriceClosest.sql",
	)
}

func sqlMkmpriceclosestSql() (*asset, error) {
	bytes, err := sqlMkmpriceclosestSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/mkmPriceClosest.sql", size: 527, mode: os.FileMode(438), modTime: time.Unix(1435432028, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _sqlMkmpricelastestSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x24\x8c\xc1\x6a\x84\x30\x18\x84\xef\x81\xbc\xc3\x1c\x3c\x89\x28\xf6\x5a\x3c\xb4\x9a\x52\x41\x2b\x44\xa1\xf4\x98\xc6\xb4\x0d\xdd\x24\x92\xfc\xbe\xff\xaa\x7b\x9a\x8f\x61\xe6\xab\x72\xce\xa4\xa1\x3d\xfa\x04\xfa\x33\xb8\x29\x32\x89\xb0\x6f\xeb\x01\xf8\x09\x11\x0a\x5a\xc5\xb5\x4a\x86\xa0\x83\xfb\xb6\x5e\x91\x0d\xbe\xe4\x2c\xaf\x38\xe3\x6c\x16\x83\x68\x17\x78\xe5\x4c\x81\x63\x54\x80\xec\x89\x5b\xb4\xfa\x08\xb3\xc7\x80\x37\x39\x8d\x8f\x22\x95\x4e\xfd\x5a\x7d\x1a\x9d\x8a\xff\x86\x38\xfb\x7c\x17\x52\x5c\xff\x26\xab\xf1\xf2\xd1\x9d\x96\x26\x7b\xe2\x6c\x92\x9d\x90\x78\xfd\xba\x8c\xe8\xc4\xdc\x62\xe8\xc7\x7e\x41\xfd\x7c\x0f\x00\x00\xff\xff\x0f\xed\x56\xa9\xb7\x00\x00\x00")

func sqlMkmpricelastestSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlMkmpricelastestSql,
		"sql/mkmPriceLastest.sql",
	)
}

func sqlMkmpricelastestSql() (*asset, error) {
	bytes, err := sqlMkmpricelastestSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/mkmPriceLastest.sql", size: 183, mode: os.FileMode(438), modTime: time.Unix(1435116688, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _sqlMkmpricelatesthighestSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x90\x4d\x6f\x82\x40\x10\x86\xcf\x6c\xb2\xff\xe1\x3d\x34\x11\x0c\xad\xf5\x6a\x3f\x2e\xad\x69\x4c\x1a\x7b\xd0\xbb\xd9\xc2\x08\x1b\x59\x96\xec\x6e\x25\xfe\xfb\xce\x8a\x34\x7a\xe9\x09\x18\x9e\x77\xe6\x99\x99\x4d\xa5\xf8\xa0\x80\x50\x13\x6a\x5d\xd5\xe4\x43\x8e\xce\x7a\x1d\xf4\x91\xd0\x39\x5d\x10\xec\x1e\x0a\x85\x72\x25\x54\xe1\xac\xf7\x50\x4d\x13\x8b\x3a\xf8\x48\xb4\x41\xb7\x95\x9f\x78\x29\x1a\x15\x38\x3f\xa4\xfc\x83\x14\xd3\x99\x14\x52\xf4\x3a\xd4\x60\xe6\xb4\xeb\x75\x5b\xda\x1e\xca\x23\x95\x22\xf1\xd4\x50\x11\x30\xc5\xde\x59\x33\x86\x8c\xaa\x74\x11\x67\x19\xe5\x0e\x14\x18\xeb\x6b\x72\xc4\xcf\xa4\x55\x86\x5e\xee\xe6\x50\x6d\x79\xfe\xb4\x7d\x9a\xe1\x9e\x3b\x1b\xc2\x33\x26\x73\xf4\x44\x87\xc9\x62\xc1\x42\xe4\x8e\xaa\x19\xc1\x61\x89\x57\x3c\x4a\x91\xe5\x52\xb0\xfc\xce\x13\xab\xdf\x6a\x70\x69\x10\xb9\x36\x3d\xcf\xc6\x38\xb8\x72\xf6\xa7\xc3\xf7\x29\xb2\xdc\x4b\x8a\x4b\x34\xfe\xcf\x63\x31\x3f\xcb\xe4\x97\xb3\xc5\x6e\x69\x3c\x40\xb2\x59\x7e\x2e\xdf\xb6\x78\x5f\x6d\xb6\xab\x35\xbf\x7c\xad\x53\xa6\xb3\xff\x82\xd7\x1a\xd7\x47\x88\x9a\xba\x45\x7a\x7b\xbc\x71\x27\x76\x4a\xac\x2b\xc9\x5d\x2c\x87\xbe\x28\xc9\x17\x51\x24\x8b\x3b\x07\x32\x1d\xfe\xa0\x61\x62\x04\xd0\x68\xa3\x03\xe6\x4f\xbf\x01\x00\x00\xff\xff\xbb\x3b\xa7\x73\x13\x02\x00\x00")

func sqlMkmpricelatesthighestSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlMkmpricelatesthighestSql,
		"sql/mkmPriceLatestHighest.sql",
	)
}

func sqlMkmpricelatesthighestSql() (*asset, error) {
	bytes, err := sqlMkmpricelatesthighestSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/mkmPriceLatestHighest.sql", size: 531, mode: os.FileMode(438), modTime: time.Unix(1451966850, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _sqlMkmpricelatestlowestSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x90\x3d\x6f\xc2\x30\x10\x86\xe7\x58\xf2\x7f\x78\x87\x4a\x24\x28\x2d\x65\xa5\x1f\x4b\x8b\x2a\xa4\x8a\x0e\xb0\x23\x37\x39\xc0\x22\x8e\x23\xdb\xc5\xe2\xdf\xf7\x4c\x48\x05\x4b\xa7\x24\x97\xe7\xbd\x7b\xee\x26\x63\x29\x3e\x28\x20\xec\x09\x8d\x8d\xe4\x43\x89\xce\x7a\x1d\xf4\x91\xd0\x39\x5d\x11\xec\x16\x0a\x95\x72\x35\x54\xe5\xac\xf7\x50\x4d\x93\x8a\x3a\xf8\x44\xb4\x41\xb7\x3b\x3f\xf2\x52\x34\x2a\x70\xbe\x4f\xf9\x07\x29\xc6\x13\x29\xa4\x88\x3a\xec\xc1\xcc\x69\x13\x75\x5b\xdb\x08\xe5\x91\x4b\x91\x79\x6a\xa8\x0a\x18\x63\xeb\xac\x19\x42\x46\xed\x74\x95\x66\x19\xe5\x0e\x14\x18\x8b\x7b\x72\xc4\xcf\xac\x55\x86\x5e\xee\xa6\x50\x6d\x7d\xfe\xb4\x31\x2f\x70\xcf\x9d\x0d\xe1\x19\xa3\x29\x22\xd1\x61\x34\x9b\xb1\x10\xb9\xa3\x6a\x06\xb0\x5f\xe2\x15\x8f\x52\x14\xa5\x14\x2c\xbf\xf1\xc4\xea\xb7\x1a\x5c\xea\x45\xae\x4d\xcf\xb3\x31\x0c\xde\x39\xfb\xd3\xe1\xfb\x94\x58\xee\x25\xc5\x25\x9a\xfe\x97\xa9\x58\x9e\x65\xca\xcb\xd9\x52\xb7\x3c\x1d\x20\x5b\xcd\x3f\xe7\x6f\x6b\xbc\x2f\x56\xeb\xc5\x92\x5f\xbe\x96\x39\xd3\xc5\x7f\xc1\x6b\x8d\xeb\x23\x24\x4d\xdd\x22\xbf\x3d\xde\xb0\x13\x3b\x65\xd6\xd5\xe4\x2e\x96\x7d\x5f\xd4\xe4\xab\x24\x52\xa4\x9d\x03\x99\x0e\x7f\x50\x3f\x31\x01\x68\xb4\xd1\x01\xd3\xa7\xdf\x00\x00\x00\xff\xff\x9b\x0e\x68\x1f\x12\x02\x00\x00")

func sqlMkmpricelatestlowestSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlMkmpricelatestlowestSql,
		"sql/mkmPriceLatestLowest.sql",
	)
}

func sqlMkmpricelatestlowestSql() (*asset, error) {
	bytes, err := sqlMkmpricelatestlowestSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/mkmPriceLatestLowest.sql", size: 530, mode: os.FileMode(438), modTime: time.Unix(1451966845, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _sqlMkmpricesetlatestSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\xcf\x41\x4e\x86\x30\x10\xc5\xf1\x7d\x93\xde\xe1\x2d\x5c\x7c\xb0\x80\x70\x00\x2e\xe1\x0d\x6a\xfb\x90\x89\xb4\x35\xd3\x11\xc3\xed\xb5\x62\xe2\xd6\xed\xfc\xf3\x7b\xc9\xcc\xa3\x77\xcf\xb4\x0f\x2d\x0d\xb6\x13\x47\x30\x36\xc3\xbb\x4a\x24\xb6\xaa\xe0\x49\xbd\x10\x83\x26\x48\x41\xf8\x2e\xf5\x94\xc4\x84\x46\x9b\xbc\x1b\x67\xef\xbc\x6b\x3c\x18\x0d\x23\x36\xad\xf9\xc6\x6d\xca\xe1\x55\x62\x87\x39\xe8\x1b\x0d\x9f\x3b\x95\x9d\xad\x4f\x0b\x42\x49\x30\xc9\x5c\x1f\xbf\x36\x49\x33\x29\xd1\x1e\xfd\x3a\xfc\x7f\xa8\x6a\xa2\xe2\xe5\xfa\x59\x43\x62\x8b\x38\x24\x8b\x61\x19\xfe\xda\xfd\x4e\x8f\x5f\x01\x00\x00\xff\xff\xc9\x8c\xbc\xcb\xf0\x00\x00\x00")

func sqlMkmpricesetlatestSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlMkmpricesetlatestSql,
		"sql/mkmPriceSetLatest.sql",
	)
}

func sqlMkmpricesetlatestSql() (*asset, error) {
	bytes, err := sqlMkmpricesetlatestSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/mkmPriceSetLatest.sql", size: 240, mode: os.FileMode(438), modTime: time.Unix(1441343196, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _sqlMtgpriceclosestSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x90\x3f\x6f\xc2\x30\x10\xc5\xf7\x48\xf9\x0e\x37\x30\x00\xa2\x20\xda\xb1\xa2\x12\x7b\xa7\x16\xa9\xea\x78\xb1\x8f\xe4\x24\xff\x01\xfb\x12\xca\xb7\xef\xc5\x2e\x43\xa7\x38\xf7\xe7\xf7\xde\xbd\xdd\xba\x6d\x3e\x48\xc6\x14\x32\xc8\x40\x70\x49\x6c\x08\xce\x31\x01\x42\xcf\x13\x05\x30\x98\xec\x2e\x93\x80\x89\xbe\xe3\x80\xc2\x31\xb4\xcd\x8d\x65\x00\x61\x4f\x60\x5c\xcc\x94\x05\x24\xfe\x01\xe2\xc4\x96\x6c\x69\x6e\xdb\xa6\x6d\x4e\x5a\x45\x73\x1d\x39\x69\xb5\xf2\x6f\xec\x1c\x1c\xdf\xbf\x8e\xdf\x9f\xd0\x69\xf7\x2c\x94\x60\xd6\x94\xc2\x28\xdc\x07\x68\x0b\xa7\x41\xeb\x9e\x50\x2d\x22\x5c\x47\x4a\x77\x5d\x52\x8b\x54\x86\xb3\x60\x12\x88\x67\xb0\x28\x58\xc9\xa9\x1c\x04\x21\xca\xc0\xa1\x9f\x01\x9c\x81\xeb\x81\x1d\x0d\x38\x71\x1c\x13\xdc\x08\x2c\x65\x75\x05\x58\x5b\xe8\xd4\xc6\x7c\xe0\xa4\x0e\xe3\xe8\x6c\x11\xd5\x6e\xe6\x3e\x28\x48\xd5\xb3\x7e\xdc\xbf\x94\x54\x4e\x85\x29\x97\xbf\x62\xa1\x1a\xaa\x11\x3e\xc2\xd3\x20\xd6\xbb\x39\x8c\x4c\x8e\x8c\x40\x40\x4f\x1b\xd0\xc6\xa6\x1c\xbb\x79\x10\x53\xf4\xf5\x99\xb7\x5e\xfa\xf2\xd2\xac\x07\x52\x93\xf3\xca\x61\xb1\x07\x0c\x76\x5e\x3c\x2c\x9e\xcb\x73\xf1\x02\x6f\x85\xd1\x36\x31\x59\x8d\xb1\xbb\xb7\x0d\x76\x79\x49\x3f\x92\xd0\xc8\x92\x2e\xd1\x0c\x95\xac\xb3\x4f\x65\x76\xb5\x6a\x1b\xc7\x9e\x05\xf6\xaf\xbf\x01\x00\x00\xff\xff\xcb\x0f\x19\x19\x02\x02\x00\x00")

func sqlMtgpriceclosestSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlMtgpriceclosestSql,
		"sql/mtgPriceClosest.sql",
	)
}

func sqlMtgpriceclosestSql() (*asset, error) {
	bytes, err := sqlMtgpriceclosestSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/mtgPriceClosest.sql", size: 514, mode: os.FileMode(438), modTime: time.Unix(1435431998, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _sqlMtgpricelatestSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x24\xcc\xc1\x0b\x82\x30\x1c\xc5\xf1\xfb\x60\xff\xc3\x3b\x78\x12\x51\xec\x1a\x1e\x4a\x17\x09\x9a\x30\x85\xe8\xb8\x74\xd5\x20\xa7\x6c\x3f\xff\xff\xd4\x6e\x9f\xc3\xfb\xbe\x24\xe4\x4c\x6a\x5a\x9c\xf5\xa0\x8f\xc6\x57\x91\xf6\x84\x65\x1e\x56\xe0\x35\x39\x28\xf4\xca\x0d\x89\xd7\x84\x7e\x1a\x9f\xc6\x2a\x32\x93\x8d\x39\x0b\x13\xce\x38\x6b\x45\x25\xf2\x0e\x56\x8d\x3a\xc2\x3a\x8a\x40\x66\xe3\xec\x4c\xaf\x71\x91\x4d\xfd\xa7\x8f\x47\x7a\xef\xe2\xec\x7e\x15\x52\xec\x49\x16\xa4\x38\xdd\x8a\x2d\xcc\x82\x03\x67\x8d\x2c\x84\xc4\xf9\xb1\x9f\xa0\x10\x6d\x8e\xaa\xac\xcb\x0e\xe9\xf1\x17\x00\x00\xff\xff\x43\xd3\x86\x0d\xaa\x00\x00\x00")

func sqlMtgpricelatestSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlMtgpricelatestSql,
		"sql/mtgPriceLatest.sql",
	)
}

func sqlMtgpricelatestSql() (*asset, error) {
	bytes, err := sqlMtgpricelatestSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/mtgPriceLatest.sql", size: 170, mode: os.FileMode(438), modTime: time.Unix(1451962411, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _sqlMtgpricelatesthighestSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x90\xcf\x6e\xf2\x30\x10\xc4\xcf\xb1\xe4\x77\x98\xc3\x27\x91\xa0\x7c\xa5\x5c\xe9\x9f\x4b\x8b\x2a\xa4\x8a\x1e\xe0\x8e\xdc\x64\x49\xac\x26\x71\x64\xbb\x58\xbc\x7d\xbd\x09\xa9\xe0\xd2\x53\x9c\xdd\x99\x9d\xdf\xee\x62\x2e\xc5\x1b\x79\xf8\x9a\x50\xeb\xaa\x26\xe7\x73\xf4\xc6\x69\xaf\x4f\x84\xde\xea\x82\x60\x8e\x50\x28\x94\x2d\xa1\x0a\x6b\x9c\x83\x6a\x1a\x2e\x6a\xef\x58\xd1\x79\xdd\x55\x6e\xe6\xa4\x68\x94\x8f\xfe\xd1\xe5\xee\xa4\x98\x2f\xa4\x90\x22\x68\x5f\x23\x6a\xce\x87\xa0\xbb\xd2\x04\x28\x87\x54\x8a\xc4\x51\x43\x85\xc7\x1c\x47\x6b\xda\xc9\xd4\xfa\x6a\x78\xc5\x7e\xa8\xc9\xf2\x37\xe9\x54\x4b\x4f\xff\x96\x50\x5d\x39\xfc\x9a\x90\x66\xf8\x1f\x47\xb6\x84\x47\xcc\x96\x08\x44\x5f\xb3\xd5\x2a\x92\x90\x3d\xa9\x66\x12\x8e\xf4\xcf\xb8\x97\x22\xcb\xa5\x88\xd4\x07\x47\x91\xf9\x36\x3f\x96\x46\x82\x6b\xc4\x21\x1b\x53\x70\x65\xcd\x77\x8f\xcf\x33\x6b\xe3\x2c\x29\x2e\x56\xee\xe7\x5c\xcc\x07\x98\xfc\x72\x2f\x9e\x96\xf2\xe6\xc9\x6e\xfd\xbe\x7e\xd9\xe3\x75\xb3\xdb\x6f\xb6\xf1\xf1\xb1\x4d\xa3\x3a\xfb\xcb\x78\x8d\x71\x7d\x04\xc6\xd4\x1d\xd2\xdb\xab\x4d\x3b\x45\xa6\xc4\xd8\x92\xec\x85\x72\x9c\x8b\x92\x5c\xc1\x20\x19\xef\xec\xa9\xed\xf1\x2b\x1a\x13\x59\x80\x46\xb7\xda\x63\xf9\xf0\x13\x00\x00\xff\xff\x1c\xb0\x42\x55\x0c\x02\x00\x00")

func sqlMtgpricelatesthighestSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlMtgpricelatesthighestSql,
		"sql/mtgPriceLatestHighest.sql",
	)
}

func sqlMtgpricelatesthighestSql() (*asset, error) {
	bytes, err := sqlMtgpricelatesthighestSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/mtgPriceLatestHighest.sql", size: 524, mode: os.FileMode(438), modTime: time.Unix(1451966825, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _sqlMtgpricelatestlowestSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x90\xcf\x6e\xf2\x30\x10\xc4\xcf\xb1\xe4\x77\x98\xc3\x27\x91\xa0\x7c\xa5\x5c\xe9\x9f\x4b\x8b\x2a\xa4\x8a\x1e\xe0\x8e\xdc\x64\x01\xab\x4e\x1c\x79\x5d\x2c\xde\xbe\x76\x42\x2a\xb8\x54\x39\xc4\x5e\xcf\xec\xfc\x76\x67\x53\x29\xde\xc8\xc3\x1f\x09\xc6\x06\x62\x5f\xa2\xb3\xac\xbd\x3e\x11\x3a\xa7\x2b\x82\xdd\x43\xa1\x52\xae\x86\xaa\x9c\x65\x86\x32\x26\x15\xb5\xe7\xa4\x68\xbd\x6e\x0f\x3c\x61\x29\x8c\xf2\xd1\x3f\xb8\xf8\x4e\x8a\xe9\x4c\x8a\xf4\x05\xed\x8f\x88\xaa\xf3\x2e\xe8\xb6\xb6\x01\x8a\x91\x4b\x91\x31\x19\xaa\x3c\xa6\xd8\x3b\xdb\x8c\xb6\xc6\x1f\xfa\x53\x7c\x0f\x47\x72\xe9\x9f\xb5\xaa\xa1\xa7\x7f\x73\xa8\xb6\xee\xaf\x36\xe4\x05\xfe\xc7\x96\x0d\xe1\x11\x93\x39\x02\xd1\xd7\x64\xb1\x88\x2c\xe4\x4e\xca\x8c\xc2\x81\xff\x19\xf7\x52\x14\xa5\x14\x91\x7b\xc7\x14\xa9\x6f\xf3\x63\x69\x20\xb8\x46\xec\xb3\x31\x06\x1f\x9c\xfd\xee\xf0\x79\x4e\xda\xd8\x4b\x8a\x8b\x35\xbd\x97\xa9\x58\xf6\x30\xe5\x65\x63\xa9\x5b\x9e\x26\xcf\x36\xcb\xf7\xe5\xcb\x16\xaf\xab\xcd\x76\xb5\x8e\x87\x8f\x75\x1e\xd5\xc5\x5f\xc6\x6b\x8c\xeb\x25\x24\x4c\xdd\x22\xbf\xdd\xda\x38\x53\x64\xca\xac\xab\xc9\x5d\x28\x87\xbe\xa8\x89\xab\x04\x52\xa4\x99\x3d\x35\x1d\x7e\x45\x43\xa2\xe2\x0a\x46\x37\xda\x63\xfe\xf0\x13\x00\x00\xff\xff\x81\x91\xd3\xf1\x0c\x02\x00\x00")

func sqlMtgpricelatestlowestSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlMtgpricelatestlowestSql,
		"sql/mtgPriceLatestLowest.sql",
	)
}

func sqlMtgpricelatestlowestSql() (*asset, error) {
	bytes, err := sqlMtgpricelatestlowestSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/mtgPriceLatestLowest.sql", size: 524, mode: os.FileMode(438), modTime: time.Unix(1451966854, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _sqlMtgpricesetlatestSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x8c\x31\x6e\x85\x30\x10\x44\x7b\x4b\xbe\xc3\x14\x29\x80\x02\x44\x1d\x71\x89\xdc\xc0\xb1\x87\xb0\x12\xb6\xa3\xf5\x86\x88\xdb\x27\x84\x48\xbf\xfd\xed\xbc\x79\x6f\x1a\xbc\x7b\xa3\x7d\x69\x69\xb0\x8d\xd8\x83\xb1\x19\x3e\x55\x22\xb1\x56\x05\x0f\xea\x89\x18\x34\x41\x0a\xc2\x2f\xa9\x87\x24\x26\x34\xda\xe8\xdd\x30\x79\xe7\x5d\xe3\xce\x68\x18\xb0\x6a\xcd\xb7\xdc\xc6\x6c\x1f\x77\xe6\x7b\xa3\xf2\xfa\x2f\x2f\x33\x42\x49\x30\xc9\x5c\xba\x7f\x29\x49\x33\x29\xd1\xba\x6b\xed\x9f\x28\x54\x4d\x54\xbc\x9f\x7f\x19\x24\xb6\x88\x5d\xb2\x18\xe6\xfe\xc1\x6e\xef\x82\xaf\x3f\x01\x00\x00\xff\xff\xbd\x15\x77\xd2\xe3\x00\x00\x00")

func sqlMtgpricesetlatestSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlMtgpricesetlatestSql,
		"sql/mtgPriceSetLatest.sql",
	)
}

func sqlMtgpricesetlatestSql() (*asset, error) {
	bytes, err := sqlMtgpricesetlatestSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/mtgPriceSetLatest.sql", size: 227, mode: os.FileMode(438), modTime: time.Unix(1441082607, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sql/addPriceMKMprice.sql": sqlAddpricemkmpriceSql,
	"sql/addPriceMTGprice.sql": sqlAddpricemtgpriceSql,
	"sql/bulkLatest.sql": sqlBulklatestSql,
	"sql/historicalPriceMKMprice.sql": sqlHistoricalpricemkmpriceSql,
	"sql/historicalPriceMTGprice.sql": sqlHistoricalpricemtgpriceSql,
	"sql/medianMKM.sql": sqlMedianmkmSql,
	"sql/medianMtgprice.sql": sqlMedianmtgpriceSql,
	"sql/mkmPriceClosest.sql": sqlMkmpriceclosestSql,
	"sql/mkmPriceLastest.sql": sqlMkmpricelastestSql,
	"sql/mkmPriceLatestHighest.sql": sqlMkmpricelatesthighestSql,
	"sql/mkmPriceLatestLowest.sql": sqlMkmpricelatestlowestSql,
	"sql/mkmPriceSetLatest.sql": sqlMkmpricesetlatestSql,
	"sql/mtgPriceClosest.sql": sqlMtgpriceclosestSql,
	"sql/mtgPriceLatest.sql": sqlMtgpricelatestSql,
	"sql/mtgPriceLatestHighest.sql": sqlMtgpricelatesthighestSql,
	"sql/mtgPriceLatestLowest.sql": sqlMtgpricelatestlowestSql,
	"sql/mtgPriceSetLatest.sql": sqlMtgpricesetlatestSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"sql": &bintree{nil, map[string]*bintree{
		"addPriceMKMprice.sql": &bintree{sqlAddpricemkmpriceSql, map[string]*bintree{
		}},
		"addPriceMTGprice.sql": &bintree{sqlAddpricemtgpriceSql, map[string]*bintree{
		}},
		"bulkLatest.sql": &bintree{sqlBulklatestSql, map[string]*bintree{
		}},
		"historicalPriceMKMprice.sql": &bintree{sqlHistoricalpricemkmpriceSql, map[string]*bintree{
		}},
		"historicalPriceMTGprice.sql": &bintree{sqlHistoricalpricemtgpriceSql, map[string]*bintree{
		}},
		"medianMKM.sql": &bintree{sqlMedianmkmSql, map[string]*bintree{
		}},
		"medianMtgprice.sql": &bintree{sqlMedianmtgpriceSql, map[string]*bintree{
		}},
		"mkmPriceClosest.sql": &bintree{sqlMkmpriceclosestSql, map[string]*bintree{
		}},
		"mkmPriceLastest.sql": &bintree{sqlMkmpricelastestSql, map[string]*bintree{
		}},
		"mkmPriceLatestHighest.sql": &bintree{sqlMkmpricelatesthighestSql, map[string]*bintree{
		}},
		"mkmPriceLatestLowest.sql": &bintree{sqlMkmpricelatestlowestSql, map[string]*bintree{
		}},
		"mkmPriceSetLatest.sql": &bintree{sqlMkmpricesetlatestSql, map[string]*bintree{
		}},
		"mtgPriceClosest.sql": &bintree{sqlMtgpriceclosestSql, map[string]*bintree{
		}},
		"mtgPriceLatest.sql": &bintree{sqlMtgpricelatestSql, map[string]*bintree{
		}},
		"mtgPriceLatestHighest.sql": &bintree{sqlMtgpricelatesthighestSql, map[string]*bintree{
		}},
		"mtgPriceLatestLowest.sql": &bintree{sqlMtgpricelatestlowestSql, map[string]*bintree{
		}},
		"mtgPriceSetLatest.sql": &bintree{sqlMtgpricesetlatestSql, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

