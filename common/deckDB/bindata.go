// Code generated by go-bindata.
// sources:
// sql/addCard.sql
// sql/addDeck.sql
// sql/addEvent.sql
// sql/contentsArchetype.sql
// sql/contentsDeck.sql
// sql/existsEvent.sql
// sql/historicalDecksForCard.sql
// sql/latestArchetype.sql
// sql/metaDeck.sql
// DO NOT EDIT!

package deckDB

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sqlAddcardSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8c\x31\x8e\xc2\x30\x10\x45\x7b\x4b\xbe\xc3\x2f\x52\x6c\x22\x6b\xa3\x5d\x28\x68\x29\x28\xd2\x04\x09\x72\x81\x21\x1e\xc0\x52\x62\x87\x78\x42\x94\xdb\x63\xb7\x14\x6f\x9a\xf7\xe6\xd7\x95\x56\x5a\x1d\xad\x8d\x20\x78\x5e\xd1\xd3\x6c\xb1\x3a\x79\x82\x86\x01\xe1\x0e\x27\x31\x89\x9e\x63\xa4\x79\xc3\xc8\x42\x96\x84\x20\x41\xab\x51\x1e\x12\xa6\xc3\x6f\xfe\x89\x79\xa7\xaa\xf3\x6d\xda\xeb\xe9\xd2\xa1\x69\xbb\x33\xbe\x92\x1f\x4f\x23\x1b\xbc\x16\xf2\xe2\x64\x33\x88\xce\xf2\x2d\x24\x69\x30\xd1\xcc\x5e\x4a\xad\xde\x34\x2c\x9c\xe3\xe2\xcf\xa0\xf8\x4f\xec\x12\xfb\xf2\x13\x00\x00\xff\xff\x3c\x6f\x56\x5f\xac\x00\x00\x00")

func sqlAddcardSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlAddcardSql,
		"sql/addCard.sql",
	)
}

func sqlAddcardSql() (*asset, error) {
	bytes, err := sqlAddcardSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/addCard.sql", size: 172, mode: os.FileMode(438), modTime: time.Unix(1451357687, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _sqlAdddeckSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8d\xbd\xae\xc2\x30\x0c\x85\xf7\x48\x79\x87\x33\x74\xb8\xad\xaa\x5b\xf1\x33\xb0\x32\x30\x74\x29\x12\xf4\x05\xac\xc6\x40\x45\x9a\x54\x89\xa1\xea\xdb\x93\x30\x32\x7c\x96\x2c\x7f\x3e\xa7\xa9\xb4\xd2\xea\x68\x4c\x04\xc1\xf1\x02\xc3\xc3\x13\xcb\x28\x0f\x90\xb5\xf0\x37\x8c\x12\xd3\x61\xe0\x18\x29\xac\x98\x58\xc8\x90\x10\xc4\x6b\x35\xc9\x5d\xfc\x7c\xf8\xcf\x3f\x31\xe7\x54\x4d\x9e\x6d\x77\x3d\x5d\x7a\xb4\x5d\x7f\xc6\x8f\xf2\xe7\x68\xe2\x1a\xb3\xa5\x95\x43\xfd\x2d\x1b\x4d\xda\x29\xb0\x93\x52\xab\x37\xd9\x17\x67\xaf\xd8\xd4\x28\xb6\x89\x5d\x62\x5f\x7e\x02\x00\x00\xff\xff\x0e\x08\x8f\x4b\xa7\x00\x00\x00")

func sqlAdddeckSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlAdddeckSql,
		"sql/addDeck.sql",
	)
}

func sqlAdddeckSql() (*asset, error) {
	bytes, err := sqlAdddeckSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/addDeck.sql", size: 167, mode: os.FileMode(438), modTime: time.Unix(1451357693, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _sqlAddeventSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8d\xbd\xae\xc2\x30\x14\x83\xf7\x48\x79\x07\x0f\x1d\x6e\xab\xea\x56\xc0\xc2\xca\xc0\xd0\xa5\x48\xd0\x17\x38\x22\x07\x1a\x29\x7f\x22\x87\x56\xbc\x3d\x0d\x6c\x0c\xf6\xe2\xcf\x76\xd7\x68\xa5\xd5\xc1\x98\x0c\x42\xe0\x05\x3c\x73\x10\x2c\x56\x26\x90\x73\x88\x37\x58\xc9\x6b\x72\xe5\x9c\xe9\xf1\x82\x67\x21\x43\x42\x90\xa8\x95\x97\xbb\xc4\xb4\xff\xff\x94\x72\x59\x6a\xba\xe2\xfd\x70\x39\x9e\x47\xf4\xc3\x78\xc2\x2f\xf3\x17\xc8\x73\xfb\xfd\xb1\xa6\xc5\x44\x29\x71\x60\x53\x6b\x35\x93\x7b\x72\x41\xaa\x4d\x8b\x6a\xbb\x6a\x57\xbf\x03\x00\x00\xff\xff\x19\x81\x2b\x30\xa1\x00\x00\x00")

func sqlAddeventSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlAddeventSql,
		"sql/addEvent.sql",
	)
}

func sqlAddeventSql() (*asset, error) {
	bytes, err := sqlAddeventSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/addEvent.sql", size: 161, mode: os.FileMode(438), modTime: time.Unix(1450833180, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _sqlContentsarchetypeSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x91\xcd\xee\xda\x30\x10\xc4\xcf\x44\xca\x3b\xec\x01\x89\x0f\x45\x20\xe0\x52\xa9\xd7\x3e\x41\xc5\xbd\x5a\xec\x4d\xe2\xe2\xd8\xc6\x5e\x43\xd3\xa7\xef\xc6\x81\x22\x8e\xff\x43\x94\xf8\x63\x7e\x33\x3b\xd9\x6f\xeb\xaa\xae\x7e\x12\xe7\xe8\x12\xa0\xb5\xa0\x30\xea\x04\xdc\x23\x43\x8f\x77\x02\x0c\x81\x30\x92\x06\xe3\x00\xa1\x33\x77\x92\x77\x54\x3d\xf1\x18\xa8\xae\x30\x81\xf5\xae\x03\x7c\x6a\x26\x39\x3c\x64\x55\xae\x0f\xf8\xdb\x47\x20\xd1\xf0\x0e\xce\xbd\x99\x2c\x92\x87\x38\xfb\xd5\x55\xef\x1f\x72\xc7\x8d\xc0\x66\xa0\x04\x84\xaa\x9f\x09\x2f\xd7\x46\x20\x39\x51\x9b\xad\x00\xb5\x51\xc8\xc2\xf3\xed\xb4\xb7\x9b\x92\xd7\xd5\x19\xaf\x24\xa4\xc5\xf2\x20\xb1\x22\x8e\xd3\xa9\xf3\x71\x40\x6b\xfe\x4a\xea\x81\x3b\xf6\xe1\xdb\x3b\x32\x38\x1c\x66\xc1\xf1\x2d\x28\x9e\xe5\x00\xd8\x03\xfd\x09\xd6\x28\xc3\x76\x94\xa4\xb7\x6c\xa2\x88\x3c\xc3\x85\x20\x44\x4a\x32\xcb\x34\x9c\x26\x75\x2d\x98\xd3\x17\x30\x2f\x5d\x03\xa6\x85\xd5\x0f\x6a\x31\x5b\x5e\x09\x05\x00\xa4\x9c\x37\x3e\x19\x4d\x52\x28\x3d\xd9\xf2\xe5\xca\xb2\x35\x96\x29\x4e\x77\x4d\x27\x53\x92\x96\x16\xb6\xfb\xb9\x89\x44\x96\x14\x17\xff\x06\x52\x1e\xd6\xb7\x8c\x8e\x0d\x8f\x1b\x68\xa3\x1f\x5e\x55\xec\xca\x1f\x16\xcf\x47\x4f\x12\x29\x48\xcd\xc5\x52\x76\x16\xeb\x27\x63\xfb\xa9\xf8\x5f\xde\xaf\x92\x7e\xbd\x3c\x34\xb0\x3c\xca\x73\xda\x6c\x44\xd6\x45\x9f\x03\x5c\xc6\x62\x0d\x3e\x6a\x49\x28\xab\xcf\x08\x9a\x92\xfa\xfe\x2f\x00\x00\xff\xff\x48\x06\xbe\x5d\x6f\x02\x00\x00")

func sqlContentsarchetypeSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlContentsarchetypeSql,
		"sql/contentsArchetype.sql",
	)
}

func sqlContentsarchetypeSql() (*asset, error) {
	bytes, err := sqlContentsarchetypeSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/contentsArchetype.sql", size: 623, mode: os.FileMode(438), modTime: time.Unix(1451533415, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _sqlContentsdeckSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x14\xcd\x41\xca\x83\x30\x14\x04\xe0\xbd\xe0\x1d\x66\xf1\xaf\x44\x94\x7f\x57\x2c\xbd\x44\x6f\x10\x93\x51\x1f\xad\x2f\x36\x79\xb6\xf4\xf6\x4d\x36\x03\xf3\xc1\x30\x63\xd7\x36\x6d\x73\xa7\x9d\x49\x33\x6c\x23\x7c\x54\xa3\x5a\x46\x5c\xe0\x10\xe8\x1f\x58\xe5\x4d\x85\x14\xab\x55\xc2\x50\x37\xdd\x58\x33\xf3\x49\x6f\x50\xb7\xb3\xc7\xeb\x74\x6a\x62\xdf\x69\x9a\x65\x15\xb5\x1e\x59\x02\xe7\xe8\x52\xc0\x92\xe2\x8e\xdd\x56\x8b\xc7\x65\xf0\x45\x32\x3e\x1b\x13\x71\xb8\x54\xee\x6e\x7f\xff\xd7\x5f\x00\x00\x00\xff\xff\xea\x49\x45\xf7\x8c\x00\x00\x00")

func sqlContentsdeckSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlContentsdeckSql,
		"sql/contentsDeck.sql",
	)
}

func sqlContentsdeckSql() (*asset, error) {
	bytes, err := sqlContentsdeckSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/contentsDeck.sql", size: 140, mode: os.FileMode(438), modTime: time.Unix(1451693339, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _sqlExistseventSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x34\xcc\x31\xce\xc2\x30\x14\x03\xe0\xbd\x52\xef\xe0\xa1\xc3\xff\x77\x68\xe9\x86\x84\xe0\x10\x88\x0b\x44\xa9\x43\x23\xc8\x4b\x94\xf7\x0a\xd7\x47\x2d\x62\xf1\xf2\xd9\x1e\xfb\xb6\x69\x9b\x2b\x6d\xad\xa2\xb0\x85\x28\x95\x4a\xf1\x44\x0e\x70\xd0\x42\x1f\x43\xe4\x0c\xbe\x28\x36\x6c\xed\x9b\x7b\x50\xd1\x4d\x70\x0a\x27\x5f\x88\xf3\x4e\xfd\xb8\xa5\xf2\x49\x6f\xf0\x79\x15\xfb\x13\x97\xf8\x8f\x0b\x0e\x08\x35\x27\x24\xbb\x5b\x2e\xc7\x61\x5f\x29\xde\x0b\x2b\x7f\x17\xe7\x6e\x3a\x7d\x02\x00\x00\xff\xff\xe6\xb5\xf0\xf2\x91\x00\x00\x00")

func sqlExistseventSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlExistseventSql,
		"sql/existsEvent.sql",
	)
}

func sqlExistseventSql() (*asset, error) {
	bytes, err := sqlExistseventSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/existsEvent.sql", size: 145, mode: os.FileMode(438), modTime: time.Unix(1451706143, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _sqlHistoricaldecksforcardSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x8e\x4d\xca\x83\x30\x10\x40\xd7\x06\x72\x87\x59\x7c\x0b\x75\xa1\x7c\xbb\x42\xe9\x25\x7a\x81\x92\x26\xe3\x4f\x9b\x1f\x99\xc4\x8a\xb7\x6f\x46\x85\xe2\x66\xc8\x0c\xbc\x97\xd7\xd6\x52\x48\x71\xc7\x34\x93\x8f\xa0\xac\x05\x83\xfa\x0d\x8a\xf4\x80\x69\x9d\x30\xdf\x40\x2b\x32\xb0\xa8\x08\xa3\xd7\x76\x36\x68\xf2\x43\x8a\x2e\x10\x38\xf5\xca\x13\x3f\xe8\x53\x6c\x58\x54\xb7\x3c\x23\x5a\xd4\x09\xbc\x72\x08\x1d\x05\x07\x2e\xf5\x29\x4c\x97\x86\xdd\x11\x96\x01\x09\xa5\x28\x78\x1b\x59\x06\x79\x29\xca\x83\x3a\xae\x27\x8e\x0b\x0e\x6e\xb3\xde\xfe\xfe\xab\xcc\x28\x6f\xf6\xcf\xc7\x3d\xe9\x27\xa9\xcf\xfc\xd6\xf9\xd8\x3b\xcb\x8a\xd1\x9e\xc2\x3c\xc1\x73\xdd\x74\xd7\x6f\x00\x00\x00\xff\xff\xe4\x5c\x7c\xab\x06\x01\x00\x00")

func sqlHistoricaldecksforcardSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlHistoricaldecksforcardSql,
		"sql/historicalDecksForCard.sql",
	)
}

func sqlHistoricaldecksforcardSql() (*asset, error) {
	bytes, err := sqlHistoricaldecksforcardSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/historicalDecksForCard.sql", size: 262, mode: os.FileMode(438), modTime: time.Unix(1451520937, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _sqlLatestarchetypeSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x52\xcb\x8e\xdb\x30\x0c\x3c\xaf\x01\xff\x03\x0f\x01\xf6\x01\xc3\x8b\x24\x97\x02\x45\x6f\xfd\x82\xa2\xf7\x82\xb1\xe8\x98\x8d\x2c\xb9\x14\x93\xd6\xfd\xfa\x4a\xb2\x9d\x87\x81\x1e\x16\xf0\x43\xa2\xc8\x99\xe1\x50\xef\x6f\x65\x51\x16\xdf\x48\xcf\xe2\x02\x68\x47\x60\xa8\x39\xb1\x01\xdf\xe6\x9d\x45\xa5\xa0\x80\xc3\x40\x28\xe8\x1a\x5a\x0e\x50\x9a\x8e\x74\x1c\xe2\x2a\x1e\x43\x8f\x3f\xbd\x00\x5d\xc8\x69\x59\xa0\xf5\xee\x18\xd8\x10\x08\x59\xba\xa0\x53\x30\xa8\x18\xa1\x43\x23\x7c\x60\x77\xcc\x10\x39\x1b\xd0\x99\xcc\x59\x27\x21\x65\xf1\x1d\x4f\x14\xca\xe2\x69\xb3\x8d\x14\x82\x63\xe2\x73\x5e\x7a\xb4\xfc\x97\x0c\xf4\x7a\x54\x3f\x7c\xba\xa3\x77\xd8\x4f\x05\xbb\x5b\x41\x83\x62\xa6\x03\x50\x0f\xf4\x67\xb0\xdc\xb0\xda\x31\xea\xf9\x75\x66\x89\x45\x5e\xe1\x40\x30\x08\x85\xa4\x81\x5d\x96\x90\x61\xf6\x1f\x80\x59\xea\x2a\xe0\x16\x9e\xbf\x52\x8b\x67\xab\xcf\x11\x05\x00\x38\xdc\xc1\x67\x33\x26\xdb\x12\x76\x5c\xb9\xbc\x6d\xd9\x2a\x49\xcc\x4d\xad\xbf\xbd\xa7\x6f\x88\x96\x35\xba\x34\x5a\x67\xfc\x7a\x1a\x4a\xb5\x8a\x0e\x16\x47\x92\x2a\xf2\x2d\xf1\x6c\x69\xa8\x93\xe6\x5b\xf2\x1c\xec\xd2\x10\x1d\x99\x44\xd2\x8a\xef\x1f\xc1\xd6\xe9\x65\xf1\xbb\x23\xb9\x5e\x07\x76\x91\x25\x3e\x2f\xb3\xbc\x39\xfc\x80\x73\x9d\xc9\x8f\x8c\xf8\xb2\xd9\x56\xb0\xd9\xc5\x77\xff\x0a\x18\xe6\x92\xd7\x34\xf0\x24\xe1\x69\xd5\x0b\x4a\xb2\xea\xcb\x5a\x75\xfe\x71\xae\xf0\x62\xa2\x57\x87\xf1\x7f\x8d\xe5\xfb\x05\x96\x7b\x56\xd8\x7e\xfe\x17\x00\x00\xff\xff\x19\x43\x3c\x09\xda\x02\x00\x00")

func sqlLatestarchetypeSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlLatestarchetypeSql,
		"sql/latestArchetype.sql",
	)
}

func sqlLatestarchetypeSql() (*asset, error) {
	bytes, err := sqlLatestarchetypeSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/latestArchetype.sql", size: 730, mode: os.FileMode(438), modTime: time.Unix(1451705445, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _sqlMetadeckSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2c\xcb\x41\x0a\xc2\x30\x14\x84\xe1\x7d\xa1\x77\x98\x85\xab\x22\x16\x77\x82\x78\x09\x6f\xf0\x68\xa6\x6d\xb0\x49\x4a\xde\xa8\x78\x7b\x89\xb8\xf9\xe1\x5f\x7c\xe3\xd0\x77\x7d\x77\xa7\x9e\x35\x3b\xb4\x12\x89\xb2\x60\x32\x94\x19\x86\xc0\xe9\x81\x25\xbe\x98\x11\xe5\xbf\x8d\xa1\x91\x61\x6c\x75\x6e\x9c\x84\x7d\xb3\x0f\xeb\x11\xd9\x12\x31\xd7\x92\x90\xb4\xa8\xec\x97\x53\x03\x8e\xf7\xca\xca\x3f\xbe\x1d\xce\xd7\x6f\x00\x00\x00\xff\xff\x29\x6c\xbd\xd9\x76\x00\x00\x00")

func sqlMetadeckSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlMetadeckSql,
		"sql/metaDeck.sql",
	)
}

func sqlMetadeckSql() (*asset, error) {
	bytes, err := sqlMetadeckSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/metaDeck.sql", size: 118, mode: os.FileMode(438), modTime: time.Unix(1451785386, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sql/addCard.sql": sqlAddcardSql,
	"sql/addDeck.sql": sqlAdddeckSql,
	"sql/addEvent.sql": sqlAddeventSql,
	"sql/contentsArchetype.sql": sqlContentsarchetypeSql,
	"sql/contentsDeck.sql": sqlContentsdeckSql,
	"sql/existsEvent.sql": sqlExistseventSql,
	"sql/historicalDecksForCard.sql": sqlHistoricaldecksforcardSql,
	"sql/latestArchetype.sql": sqlLatestarchetypeSql,
	"sql/metaDeck.sql": sqlMetadeckSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"sql": &bintree{nil, map[string]*bintree{
		"addCard.sql": &bintree{sqlAddcardSql, map[string]*bintree{
		}},
		"addDeck.sql": &bintree{sqlAdddeckSql, map[string]*bintree{
		}},
		"addEvent.sql": &bintree{sqlAddeventSql, map[string]*bintree{
		}},
		"contentsArchetype.sql": &bintree{sqlContentsarchetypeSql, map[string]*bintree{
		}},
		"contentsDeck.sql": &bintree{sqlContentsdeckSql, map[string]*bintree{
		}},
		"existsEvent.sql": &bintree{sqlExistseventSql, map[string]*bintree{
		}},
		"historicalDecksForCard.sql": &bintree{sqlHistoricaldecksforcardSql, map[string]*bintree{
		}},
		"latestArchetype.sql": &bintree{sqlLatestarchetypeSql, map[string]*bintree{
		}},
		"metaDeck.sql": &bintree{sqlMetadeckSql, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

