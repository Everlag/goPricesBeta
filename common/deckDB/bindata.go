// Code generated by go-bindata.
// sources:
// sql/addCard.sql
// sql/addDeck.sql
// sql/addEvent.sql
// sql/contentsArchetype.sql
// sql/contentstDeck.sql
// sql/historicalDecksForCard.sql
// sql/latestCard.sql
// DO NOT EDIT!

package deckDB

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sqlAddcardSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8c\xbd\x0e\x82\x30\x14\x46\xf7\x26\x7d\x87\x6f\x60\x10\xd2\x48\xfc\x19\x5c\x1d\x1c\x58\x30\x51\x5e\xe0\x4a\xaf\xda\x08\x54\xe9\x45\xc2\xdb\xdb\xae\x0e\xe7\x2e\xe7\xdc\xaf\x2c\xb4\xd2\xea\x68\x6d\x00\x61\xe0\x19\x2d\x8d\x16\xb3\x93\x27\xa8\xeb\xe0\xef\x70\x12\xa2\x68\x39\x04\x1a\x17\xf4\x2c\x64\x49\x08\xe2\xb5\xea\xe5\x21\xfe\x7d\x58\xa7\x9f\x90\x76\x8a\x32\xdd\xaa\xbe\x9e\x2e\x0d\xaa\xba\x39\xe3\x2f\x59\x0d\xd4\xb3\xc1\x67\xa2\x41\x9c\x2c\x06\xc1\x59\xbe\xf9\x28\x0d\x2c\xb7\x2f\x67\x73\xad\xbe\xd4\x4d\x9c\xe2\x6c\x63\x90\x6d\x23\xbb\xc8\x3e\xff\x05\x00\x00\xff\xff\xf5\xdc\x49\x94\xac\x00\x00\x00")

func sqlAddcardSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlAddcardSql,
		"sql/addCard.sql",
	)
}

func sqlAddcardSql() (*asset, error) {
	bytes, err := sqlAddcardSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/addCard.sql", size: 172, mode: os.FileMode(438), modTime: time.Unix(1450834228, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _sqlAdddeckSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8d\x3b\x0e\xc2\x30\x10\x44\x7b\x4b\xbe\xc3\x14\x29\x48\x64\x11\xf1\x29\x68\x29\x28\xd2\x04\x09\x72\x81\x55\xbc\x80\x85\xf3\x51\xbc\x24\xca\xed\xb1\x29\x29\xde\x36\xfb\x66\xa6\x2c\xb4\xd2\xea\x6c\x6d\x00\xa1\xe7\x05\x96\xdb\x37\x16\x27\x2f\x90\xf7\x18\x1e\x70\x12\xe2\xa3\xe5\x10\x68\x5a\xd1\xb1\x90\x25\x21\xc8\xa0\x55\x27\x4f\x19\xc6\xd3\x36\x65\x42\xea\x29\xca\x74\xab\xfa\x7e\xb9\x35\xa8\xea\xe6\x8a\x3f\x65\xd3\x53\xc7\x06\xa3\xa7\x95\x27\xf3\x1b\x73\xd6\x80\x67\xee\xc5\xd9\x5c\xab\x99\xfc\x87\x93\x98\xed\x0c\xb2\x7d\xe4\x10\x39\xe6\xdf\x00\x00\x00\xff\xff\xf8\x5d\xdc\xc0\xa8\x00\x00\x00")

func sqlAdddeckSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlAdddeckSql,
		"sql/addDeck.sql",
	)
}

func sqlAdddeckSql() (*asset, error) {
	bytes, err := sqlAdddeckSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/addDeck.sql", size: 168, mode: os.FileMode(438), modTime: time.Unix(1450834243, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _sqlAddeventSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8d\xbd\xae\xc2\x30\x14\x83\xf7\x48\x79\x07\x0f\x1d\x6e\xab\xea\x56\xc0\xc2\xca\xc0\xd0\xa5\x48\xd0\x17\x38\x22\x07\x1a\x29\x7f\x22\x87\x56\xbc\x3d\x0d\x6c\x0c\xf6\xe2\xcf\x76\xd7\x68\xa5\xd5\xc1\x98\x0c\x42\xe0\x05\x3c\x73\x10\x2c\x56\x26\x90\x73\x88\x37\x58\xc9\x6b\x72\xe5\x9c\xe9\xf1\x82\x67\x21\x43\x42\x90\xa8\x95\x97\xbb\xc4\xb4\xff\xff\x94\x72\x59\x6a\xba\xe2\xfd\x70\x39\x9e\x47\xf4\xc3\x78\xc2\x2f\xf3\x17\xc8\x73\xfb\xfd\xb1\xa6\xc5\x44\x29\x71\x60\x53\x6b\x35\x93\x7b\x72\x41\xaa\x4d\x8b\x6a\xbb\x6a\x57\xbf\x03\x00\x00\xff\xff\x19\x81\x2b\x30\xa1\x00\x00\x00")

func sqlAddeventSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlAddeventSql,
		"sql/addEvent.sql",
	)
}

func sqlAddeventSql() (*asset, error) {
	bytes, err := sqlAddeventSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/addEvent.sql", size: 161, mode: os.FileMode(438), modTime: time.Unix(1450833180, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _sqlContentsarchetypeSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x8e\x41\x4e\xc3\x30\x10\x45\xd7\x89\x94\x3b\xfc\x05\x8b\xa4\x8b\x56\xec\x90\x10\x97\xe0\x02\x68\xb0\x87\xc4\x90\xd8\xd6\x78\x68\xd5\xdb\xe3\x71\x1b\x10\x9b\x44\x7e\xf2\xfb\x7e\xa7\xc3\xd0\x0f\xfd\x2b\xeb\xb7\xc4\x02\x5a\x57\x38\x12\x5f\xa0\x0b\x29\x16\x3a\x33\x28\x67\x26\x61\x8f\x10\x41\x98\xc3\x99\xeb\x5f\xdc\xc2\x7a\xcd\x3c\xf4\x54\xb0\xa6\x38\x83\xee\x8e\xe9\xb8\xd4\x53\xbb\xbe\xd1\x67\x12\x70\x75\xf4\x68\x0f\x1d\x4e\xf6\x2d\xbc\xb2\x53\xf8\x50\x34\x44\xa7\x63\xa4\x8d\x27\x7c\x48\xda\xb0\xe9\xac\x29\x3f\x1d\x5b\xc5\xd0\x77\x97\x85\x85\xe1\xd9\x7d\x05\x2b\xa8\xa4\x1b\x77\xfd\x06\xff\x69\xc6\x4c\xeb\xee\xa2\x2d\xbf\x3c\x3c\x82\xa2\x6f\xb4\x95\xfc\x2e\xfd\x6d\xed\xfc\x36\x66\xd1\x6f\x0d\x95\x71\x9a\x26\x4b\xee\x92\x78\x16\xbc\x5f\xdb\xe4\xf3\x4f\x00\x00\x00\xff\xff\xb7\x5d\x64\xa7\x37\x01\x00\x00")

func sqlContentsarchetypeSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlContentsarchetypeSql,
		"sql/contentsArchetype.sql",
	)
}

func sqlContentsarchetypeSql() (*asset, error) {
	bytes, err := sqlContentsarchetypeSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/contentsArchetype.sql", size: 311, mode: os.FileMode(438), modTime: time.Unix(1450898043, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _sqlContentstdeckSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd7\xe2\xe5\xe2\xe5\x0a\x4a\x2d\x29\x2d\xca\x2b\x56\x28\xc9\x48\x55\x48\xce\xcf\x2b\x49\xcd\x2b\x29\x56\xc8\x4f\x53\x48\x54\x48\x49\x4d\xce\x56\x48\xcf\x2c\x4b\xcd\x53\xc8\x04\x8a\x81\xb8\x99\x29\x7a\x20\x3d\x5a\xfa\x20\xb2\x38\x35\x27\x35\xb9\x44\x41\x4b\x21\xad\x28\x3f\x57\x21\xb7\x24\xbd\x24\xbf\xc0\x42\x2f\x39\xb1\x28\xa5\x58\xa1\x3c\x23\xb5\x28\x15\xaa\xc5\x56\xc5\xd0\x1a\x10\x00\x00\xff\xff\x7e\xd5\x8f\x9d\x6c\x00\x00\x00")

func sqlContentstdeckSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlContentstdeckSql,
		"sql/contentstDeck.sql",
	)
}

func sqlContentstdeckSql() (*asset, error) {
	bytes, err := sqlContentstdeckSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/contentstDeck.sql", size: 108, mode: os.FileMode(438), modTime: time.Unix(1450897615, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _sqlHistoricaldecksforcardSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x8e\x4b\x8a\xc3\x30\x0c\x40\xd7\x31\xf8\x0e\x5a\xcc\x22\xc9\x22\x61\x76\x03\x43\x2f\xd1\x0b\x14\xd7\x56\x3e\xad\x3f\x41\x76\x1a\x72\xfb\x5a\x89\xa1\x74\x23\x2c\xc1\x7b\x7e\x7d\x2b\x85\x14\x57\x4c\x2b\xf9\x08\xca\x5a\x30\xa8\x9f\xa0\x48\x4f\x98\xf6\x05\xf3\x0d\xb4\x22\x03\x9b\x8a\x30\x7b\x6d\x57\x83\x26\x3f\xa4\x18\x02\x81\x53\x8f\x3c\xf1\x85\x3e\xc5\x8e\x45\x6d\xcf\x33\xa2\x45\x9d\xc0\x2b\x87\x30\x50\x70\xe0\xd2\x98\xc2\xf2\xd7\xb1\x3b\xc2\x36\x21\xa1\x14\x15\x6f\x33\xcb\x20\x2f\x55\x5d\xa8\x72\xfd\xe2\xb8\xa0\x70\x87\xf5\xf2\xf3\xdb\x64\x46\x79\x73\x7e\x3e\x9f\x49\x1f\x49\x5b\x78\xee\xbb\x9d\x7d\x75\xc3\xc8\x48\x61\x5d\xe0\xbe\x1f\x9a\xff\x77\x00\x00\x00\xff\xff\x31\x6a\x42\x8a\xfe\x00\x00\x00")

func sqlHistoricaldecksforcardSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlHistoricaldecksforcardSql,
		"sql/historicalDecksForCard.sql",
	)
}

func sqlHistoricaldecksforcardSql() (*asset, error) {
	bytes, err := sqlHistoricaldecksforcardSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/historicalDecksForCard.sql", size: 254, mode: os.FileMode(438), modTime: time.Unix(1450897593, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _sqlLatestcardSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\xce\x41\x0e\x82\x30\x10\x05\xd0\x75\x49\xb8\xc3\x5f\x02\x21\xb0\x35\xf1\x16\x5e\xc0\x54\x3a\x4a\x95\xb6\xa6\x33\x4a\xbc\xbd\x4c\xc3\x46\x37\x5d\xfc\xfe\x37\x33\x63\x57\x57\x75\x75\x22\x79\xe5\xc8\x90\x99\xb0\x58\x21\x16\x04\x7b\x4f\x19\x8e\xa6\x47\x8f\xcb\x07\xde\xf5\xb0\x98\x6c\x76\x58\x2d\xc3\xc7\x41\x5d\x37\xea\xcb\xb4\xd0\x24\xe8\x70\xcd\x29\x20\xc8\x4d\xd2\xf3\x30\x68\x97\xeb\xca\xac\x33\x65\x2a\x83\xbc\xdb\xdc\x96\x98\x66\x17\x7b\xf8\xc3\x34\x63\x14\xa4\x55\x63\xe8\x4d\x51\x0a\x45\xf3\xb7\x49\x4f\x3c\x97\x7f\x6e\xda\x56\xeb\xed\xf1\x1b\x00\x00\xff\xff\xaf\x59\x71\x37\xd1\x00\x00\x00")

func sqlLatestcardSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlLatestcardSql,
		"sql/latestCard.sql",
	)
}

func sqlLatestcardSql() (*asset, error) {
	bytes, err := sqlLatestcardSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/latestCard.sql", size: 209, mode: os.FileMode(438), modTime: time.Unix(1450896248, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sql/addCard.sql": sqlAddcardSql,
	"sql/addDeck.sql": sqlAdddeckSql,
	"sql/addEvent.sql": sqlAddeventSql,
	"sql/contentsArchetype.sql": sqlContentsarchetypeSql,
	"sql/contentstDeck.sql": sqlContentstdeckSql,
	"sql/historicalDecksForCard.sql": sqlHistoricaldecksforcardSql,
	"sql/latestCard.sql": sqlLatestcardSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"sql": &bintree{nil, map[string]*bintree{
		"addCard.sql": &bintree{sqlAddcardSql, map[string]*bintree{
		}},
		"addDeck.sql": &bintree{sqlAdddeckSql, map[string]*bintree{
		}},
		"addEvent.sql": &bintree{sqlAddeventSql, map[string]*bintree{
		}},
		"contentsArchetype.sql": &bintree{sqlContentsarchetypeSql, map[string]*bintree{
		}},
		"contentstDeck.sql": &bintree{sqlContentstdeckSql, map[string]*bintree{
		}},
		"historicalDecksForCard.sql": &bintree{sqlHistoricaldecksforcardSql, map[string]*bintree{
		}},
		"latestCard.sql": &bintree{sqlLatestcardSql, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

